/*
* generated by Xtext
*/
package org.chw.game.ide.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.chw.game.ide.services.ProtoGrammarAccess;

public class ProtoParser extends AbstractContentAssistParser {
	
	@Inject
	private ProtoGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.chw.game.ide.ui.contentassist.antlr.internal.InternalProtoParser createParser() {
		org.chw.game.ide.ui.contentassist.antlr.internal.InternalProtoParser result = new org.chw.game.ide.ui.contentassist.antlr.internal.InternalProtoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getMapAccess().getAlternatives_5(), "rule__Map__Alternatives_5");
					put(grammarAccess.getMessageTypeAccess().getAlternatives_3(), "rule__MessageType__Alternatives_3");
					put(grammarAccess.getMessageFieldAccess().getAlternatives(), "rule__MessageField__Alternatives");
					put(grammarAccess.getMessageFieldDefaultAccess().getAlternatives_3(), "rule__MessageFieldDefault__Alternatives_3");
					put(grammarAccess.getEnumTypeAccess().getAlternatives_3(), "rule__EnumType__Alternatives_3");
					put(grammarAccess.getENTITY_NAMEAccess().getAlternatives(), "rule__ENTITY_NAME__Alternatives");
					put(grammarAccess.getComment_ALLAccess().getAlternatives(), "rule__Comment_ALL__Alternatives");
					put(grammarAccess.getModelAccess().getGroup_0(), "rule__Model__Group_0__0");
					put(grammarAccess.getImportInfoAccess().getGroup(), "rule__ImportInfo__Group__0");
					put(grammarAccess.getOptionInfoAccess().getGroup(), "rule__OptionInfo__Group__0");
					put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
					put(grammarAccess.getMapFieldAccess().getGroup(), "rule__MapField__Group__0");
					put(grammarAccess.getMapFieldAccess().getGroup_2(), "rule__MapField__Group_2__0");
					put(grammarAccess.getMapRefAccess().getGroup(), "rule__MapRef__Group__0");
					put(grammarAccess.getMapRefAccess().getGroup_1(), "rule__MapRef__Group_1__0");
					put(grammarAccess.getMessageTypeAccess().getGroup(), "rule__MessageType__Group__0");
					put(grammarAccess.getMessageSimpleFieldAccess().getGroup(), "rule__MessageSimpleField__Group__0");
					put(grammarAccess.getMessageComplexFieldAccess().getGroup(), "rule__MessageComplexField__Group__0");
					put(grammarAccess.getMessageFieldDefaultAccess().getGroup(), "rule__MessageFieldDefault__Group__0");
					put(grammarAccess.getEnumTypeAccess().getGroup(), "rule__EnumType__Group__0");
					put(grammarAccess.getEnumFieldAccess().getGroup(), "rule__EnumField__Group__0");
					put(grammarAccess.getEnumFieldOptAccess().getGroup(), "rule__EnumFieldOpt__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_0_1(), "rule__Model__NameAssignment_0_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
					put(grammarAccess.getModelAccess().getOptionsAssignment_2(), "rule__Model__OptionsAssignment_2");
					put(grammarAccess.getModelAccess().getElementsAssignment_3(), "rule__Model__ElementsAssignment_3");
					put(grammarAccess.getModelAccess().getCommAssignment_4(), "rule__Model__CommAssignment_4");
					put(grammarAccess.getImportInfoAccess().getImportURIAssignment_1(), "rule__ImportInfo__ImportURIAssignment_1");
					put(grammarAccess.getOptionInfoAccess().getNameAssignment_1(), "rule__OptionInfo__NameAssignment_1");
					put(grammarAccess.getOptionInfoAccess().getValueAssignment_3(), "rule__OptionInfo__ValueAssignment_3");
					put(grammarAccess.getMapAccess().getNameAssignment_1(), "rule__Map__NameAssignment_1");
					put(grammarAccess.getMapAccess().getBindAssignment_3(), "rule__Map__BindAssignment_3");
					put(grammarAccess.getMapAccess().getCommAssignment_5_0(), "rule__Map__CommAssignment_5_0");
					put(grammarAccess.getMapAccess().getFieldsAssignment_5_1(), "rule__Map__FieldsAssignment_5_1");
					put(grammarAccess.getMapFieldAccess().getAttrAssignment_0(), "rule__MapField__AttrAssignment_0");
					put(grammarAccess.getMapFieldAccess().getNameAssignment_1(), "rule__MapField__NameAssignment_1");
					put(grammarAccess.getMapFieldAccess().getFilterAssignment_2_1(), "rule__MapField__FilterAssignment_2_1");
					put(grammarAccess.getMapFieldAccess().getLinksAssignment_4(), "rule__MapField__LinksAssignment_4");
					put(grammarAccess.getMapRefAccess().getLinkAssignment_0(), "rule__MapRef__LinkAssignment_0");
					put(grammarAccess.getMapRefAccess().getChildAssignment_1_1(), "rule__MapRef__ChildAssignment_1_1");
					put(grammarAccess.getMessageTypeAccess().getNameAssignment_1(), "rule__MessageType__NameAssignment_1");
					put(grammarAccess.getMessageTypeAccess().getCommAssignment_3_0(), "rule__MessageType__CommAssignment_3_0");
					put(grammarAccess.getMessageTypeAccess().getFieldsAssignment_3_1(), "rule__MessageType__FieldsAssignment_3_1");
					put(grammarAccess.getMessageTypeAccess().getTypesAssignment_3_2(), "rule__MessageType__TypesAssignment_3_2");
					put(grammarAccess.getMessageSimpleFieldAccess().getAttrAssignment_0(), "rule__MessageSimpleField__AttrAssignment_0");
					put(grammarAccess.getMessageSimpleFieldAccess().getTypeAssignment_1(), "rule__MessageSimpleField__TypeAssignment_1");
					put(grammarAccess.getMessageSimpleFieldAccess().getNameAssignment_2(), "rule__MessageSimpleField__NameAssignment_2");
					put(grammarAccess.getMessageSimpleFieldAccess().getIndexAssignment_4(), "rule__MessageSimpleField__IndexAssignment_4");
					put(grammarAccess.getMessageComplexFieldAccess().getAttrAssignment_0(), "rule__MessageComplexField__AttrAssignment_0");
					put(grammarAccess.getMessageComplexFieldAccess().getTypeAssignment_1(), "rule__MessageComplexField__TypeAssignment_1");
					put(grammarAccess.getMessageComplexFieldAccess().getNameAssignment_2(), "rule__MessageComplexField__NameAssignment_2");
					put(grammarAccess.getMessageComplexFieldAccess().getIndexAssignment_4(), "rule__MessageComplexField__IndexAssignment_4");
					put(grammarAccess.getEnumTypeAccess().getNameAssignment_1(), "rule__EnumType__NameAssignment_1");
					put(grammarAccess.getEnumTypeAccess().getCommAssignment_3_0(), "rule__EnumType__CommAssignment_3_0");
					put(grammarAccess.getEnumTypeAccess().getFieldsAssignment_3_1(), "rule__EnumType__FieldsAssignment_3_1");
					put(grammarAccess.getEnumTypeAccess().getOptionsAssignment_3_2(), "rule__EnumType__OptionsAssignment_3_2");
					put(grammarAccess.getEnumFieldAccess().getNameAssignment_0(), "rule__EnumField__NameAssignment_0");
					put(grammarAccess.getEnumFieldAccess().getIndexAssignment_2(), "rule__EnumField__IndexAssignment_2");
					put(grammarAccess.getEnumFieldOptAccess().getNameAssignment_1(), "rule__EnumFieldOpt__NameAssignment_1");
					put(grammarAccess.getEnumFieldOptAccess().getValueAssignment_3(), "rule__EnumFieldOpt__ValueAssignment_3");
					put(grammarAccess.getComment_ALLAccess().getTextAssignment_0(), "rule__Comment_ALL__TextAssignment_0");
					put(grammarAccess.getComment_ALLAccess().getTextAssignment_1(), "rule__Comment_ALL__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.chw.game.ide.ui.contentassist.antlr.internal.InternalProtoParser typedParser = (org.chw.game.ide.ui.contentassist.antlr.internal.InternalProtoParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public ProtoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ProtoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
