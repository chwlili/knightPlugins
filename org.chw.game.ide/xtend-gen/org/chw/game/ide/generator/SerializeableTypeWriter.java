package org.chw.game.ide.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;

@SuppressWarnings("all")
public class SerializeableTypeWriter {
  /**
   * 生成资源
   */
  public static void generate(final IFileSystemAccess fsa, final String packName, final String typeName) {
    String _replace = packName.replace(".", "/");
    String _plus = (_replace + "/");
    String _plus_1 = (_plus + typeName);
    String _plus_2 = (_plus_1 + ".as");
    CharSequence _generateContent = SerializeableTypeWriter.generateContent(packName, typeName);
    fsa.generateFile(_plus_2, _generateContent);
  }
  
  /**
   * 生成内容
   */
  public static CharSequence generateContent(final String packName, final String typeName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packName, "");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import flash.display.BitmapData;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import flash.geom.Rectangle;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import flash.utils.ByteArray;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import flash.utils.Endian;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import flash.utils.IDataInput;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import flash.utils.IDataOutput;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class ");
    _builder.append(typeName, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const VARINT:int=0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const FIXED64:int=1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const BYTES:int=2;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const START_GROUP:int=3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const END_GROUP:int=4;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const FIXED32:int=5;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private const zlibBitmap:Boolean=true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected var _tags:Array=[];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 从字节流反序列化 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param input");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function deserialize(input:ByteArray,endPos:int=int.MAX_VALUE):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 序列化 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function serialize(output:IDataOutput):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 转换为字节数组");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function toByteArray():ByteArray");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bytes:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var tmp:ByteArray;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var swap:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("serialize(bytes);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.position=0;\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(_tags.length>0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var last:int=_tags.pop();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writeRawVarint32To(swap,makeTag(last,2));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writeRawVarint32To(swap,bytes.length);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bytes.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writeRawBytesTo(swap,bytes);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bytes.length=0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tmp=bytes;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bytes=swap;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("swap=tmp;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return bytes;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 跳过字段 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param tag");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function skipFieldFrom(input:IDataInput,tag:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var mask:int=(1<<3)-1;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var type:int=tag & mask;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch(type)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case VARINT:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//varint");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(var i:int=0;i<10;i++)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(readRawByteFrom(input)>=0)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case FIXED64:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//64-bit");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("readRawLittleEndian64From(input);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case BYTES:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//定长");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("readRawBytesFrom(input,readRawVarint32From(input));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case START_GROUP:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//start group");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("throw new Error(\"未实现start group\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var innerTag:int;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(true)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("innerTag=readTagFrom(input);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(innerTag==0 || skipFieldFrom(input,innerTag)==false)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(innerTag!=WireFormat.makeTag(WireFormat.getTagFieldNumber(tag),WireFormat.WIRETYPE_END_GROUP))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("throw new Error(\"END-GROUP TAG 未找到！\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case END_GROUP:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//end group");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("throw new Error(\"未实现end group\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case FIXED32:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//32-bit");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("readRawLittleEndian32From(input);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 获取字段的序号 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param tag");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function getFieldNum(tag:int):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return tag>>3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// 基本数据类型的读取");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ZigZag32解码 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param n");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function decodeZigZag32(n:uint):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (n>>>1) ^ -(n & 1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ZigZag64解码 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param n");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*protected function decodeZigZag64(n:BigInteger):BigInteger");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var nA:BigInteger=n.shiftRight(1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var nB:BigInteger=n.and(BigInteger.ONE);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return nA.xor(nB);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个Tag ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readTagFrom(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(input.bytesAvailable!=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return readRawVarint32From(input);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个字节 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readRawByteFrom(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return input.readByte();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个32位的Varint ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readRawVarint32From(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var tmp:int=readRawByteFrom(input);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(tmp>=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return tmp;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var result:int=tmp & 0x7F;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if((tmp=readRawByteFrom(input))>=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result |= tmp<<7;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result |= ( tmp & 0x7F )<<7;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if((tmp=readRawByteFrom(input))>=0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("result |= tmp<<14;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("result |= (tmp & 0x7F )<<14;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if((tmp=readRawByteFrom(input))>=0)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("result |= tmp<<21;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("result |= (tmp&0x7F)<<21;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if((tmp=readRawByteFrom(input))>=0)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("result |= tmp<<28;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("result |= (tmp&0xfF)<<28;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for(var i:int=0;i<5;i++)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("if(readRawByteFrom(input)>=0)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("throw new Error(\"读取Varint32时遇到无效的Varint！\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个64位的Varint ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function readRawVarint64From(input:IDataInput):String");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var key:String=\"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var step:int=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(step<10)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var byte:uint=input.readUnsignedByte();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var byteChar:String=(byte & 0x7F).toString(2);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while(byteChar.length<7)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("byteChar=\"0\"+byteChar;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("key=byteChar+key;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if((byte & 0x80)==0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("step++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var id:String=\"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(key.length>=32)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("id=parseInt(key.substr(key.length-32),2).toString(16);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while(id.length<8)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("id=\"0\"+id;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(key.length>32)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("id=parseInt(key.substr(0,key.length-32),2).toString(16)+id;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(id.length%2!=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("id=\"0\"+id;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return id;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个32位的浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readRawLittleEndian32From(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var endian:String=input.endian;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("input.endian=Endian.LITTLE_ENDIAN;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var result:Number=input.readFloat();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("input.endian=endian;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个64位的浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readRawLittleEndian64From(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var endian:String=input.endian;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("input.endian=Endian.LITTLE_ENDIAN;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var result:Number=input.readDouble();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("input.endian=endian;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个字节流 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param size");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readRawBytesFrom(input:IDataInput,size:uint):ByteArray");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bytes:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(size!=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("input.readBytes(bytes,0,size);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return bytes;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//------------------------------------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//  反序列化读取");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个32位的int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readInt32From(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint32From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个32位的无符号int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readUInt32From(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint32From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个32位的有符号int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readSInt32From(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return decodeZigZag32(readRawVarint32From(input));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个64位的int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readInt64From(input:IDataInput):String");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint64From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个64位的无符号int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readUInt64From(input:IDataInput):String");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint64From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个64位的有符号int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readSInt64From(input:IDataInput):String");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//return decodeZigZag64(readRawVarint64From(input));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint64From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个32位的浮点数");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readFloatFrom(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawLittleEndian32From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个Fixed32数值");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readFixed32From(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawLittleEndian32From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个SFixed32数值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readSFixed32From(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawLittleEndian32From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个64位的浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readDoubleFrom(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawLittleEndian64From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个Fixed64数值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readFixed64From(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawLittleEndian64From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个SFixed64数值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readSFixed64From(input:IDataInput):Number");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawLittleEndian64From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个布尔值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readBoolFrom(input:IDataInput):Boolean");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint32From(input) !=0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个枚举值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readEnumFrom(input:IDataInput):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawVarint32From(input);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个字符串 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readStringFrom(input:IDataInput):String");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return input.readUTFBytes(readRawVarint32From(input));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个字节流 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readBytesFrom(input:IDataInput):ByteArray");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return readRawBytesFrom(input,readRawVarint32From(input));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 读取一个位图 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param input");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function readBitmapFrom(input:IDataInput):BitmapData");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bytes:ByteArray=readRawBytesFrom(input,readRawVarint32From(input));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var w:uint=bytes.readUnsignedInt();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var h:uint=bytes.readUnsignedInt();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var zlibed:Boolean=bytes.readBoolean();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var datas:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.readBytes(datas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(zlibed)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("datas.uncompress();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("datas.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bitmap:BitmapData=new BitmapData(w,h,true,0xff000000);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bitmap.setPixels(new Rectangle(0,0,w,h),datas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return bitmap;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//----------------------------------------------------------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//  序列化");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//----------------------------------------------------------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// 静态函数");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 对一个32位int值进行ZigZag编码 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param n");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function encodeZigZag32(n:int):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (n<<1)^(n>>31);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 对一个64位int值进行ZigZag编码 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param n");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @return ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*protected function encodeZigZag64(n:BigInteger):BigInteger");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var nA:BigInteger=n.shiftLeft(1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var nB:BigInteger=n.shiftRight(63);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return nA.xor(nB);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 生成一个Tag ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param wireType");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("protected function makeTag(fieldNumber:int,wireType:int):int");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return (fieldNumber<<3)|wireType;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// 基本数据类型的写入");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个字节 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawByteTo(output:IDataOutput,value:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.writeByte(value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个字节数组 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param offset");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param length");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawBytesTo(output:IDataOutput,value:ByteArray):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.writeBytes(value,0,value.length);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个字节数组的部分字节 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param offset");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param length");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawBytesPartialTo(output:IDataOutput,value:ByteArray,offset:uint=0,length:uint=0):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.writeBytes(value,offset,length);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个TAG ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param wireType");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeTagTo(output:IDataOutput,fieldNumber:int,wireType:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,makeTag(fieldNumber,wireType));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个32位的Varint ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawVarint32To(output:IDataOutput,value:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(true)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if((value & ~0x7F)==0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writeRawByteTo(output,value);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writeRawByteTo(output,(value & 0x7F)|0x80);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("value>>>=7;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个64位的Varint ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawVarint64To(output:IDataOutput,value:String):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(value.length%2!=0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("value=\"0\"+value;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var i:int=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bits:String=\"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(i<value.length)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var byte:uint=parseInt(value.substr(i,2),16);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var byteBits:String=byte.toString(2);;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while(byteBits.length<8)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("byteBits=\"0\"+byteBits;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bits+=byteBits;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("i++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("i++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var index:int=bits.indexOf(\"1\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(index!=-1)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bits=bits.substr(index);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var r:int=bits.length;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(r>0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var left:int=Math.max(0,r-7);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var right:int=r;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("var val:uint=parseInt(bits.substring(left,right),2);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(r>7)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("val|=0x80;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writeRawByteTo(output,val);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("r-=7;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 以低位在前的方式写入一个32位浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawLittleEndian32To(output:IDataOutput,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var endian:String=output.endian;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.endian=Endian.LITTLE_ENDIAN;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.writeFloat(value);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.endian=endian;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 以低位在前的方式写入一个64位浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeRawLittleEndian64To(output:IDataOutput,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var endian:String=output.endian;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.endian=Endian.LITTLE_ENDIAN;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.writeDouble(value);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output.endian=endian;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// protobuf数据类型的写入");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//-------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个布尔值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeBoolTo(output:IDataOutput,fieldNumber:int,value:Boolean):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawByteTo(output,value ? 1 : 0 );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个枚举值 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeEnumTo(output:IDataOutput,fieldNumber:int,value:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个定长字符串 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeStringTo(output:IDataOutput,fieldNumber:int,value:String):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bytes:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.writeUTFBytes(value);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,BYTES);\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,bytes.length);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawBytesTo(output,bytes);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个写长字节数组 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeBytesTo(output:IDataOutput,fieldNumber:int,value:ByteArray):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,BYTES);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,value.length);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawBytesTo(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个位图的数据 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param output");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeBitmapTo(output:IDataOutput,fieldNumber:int,value:BitmapData):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bytes:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.writeUnsignedInt(value.width);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.writeUnsignedInt(value.height);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.writeBoolean(zlibBitmap);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var datas:ByteArray=value.getPixels(value.rect);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(zlibBitmap)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("datas.compress();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("datas.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.writeBytes(datas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,BYTES);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,bytes.length);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawBytesTo(output,bytes);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个子消息 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param output");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeMessageTo(output:IDataOutput,fieldNumber:int,value:SerializeableData):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var bytes:ByteArray=new ByteArray();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("value.serialize(bytes);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bytes.position=0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,BYTES);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,bytes.length);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawBytesTo(output,bytes);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个32位int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeInt32To(output:IDataOutput,fieldNumber:int,value:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个无符号的32位int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeUInt32To(output:IDataOutput,fieldNumber:int,value:uint):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个有符号的32位int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeSInt32To(output:IDataOutput,fieldNumber:int,value:int):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint32To(output,encodeZigZag32(value));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个64位int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeInt64To(output:IDataOutput,fieldNumber:int,value:String):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint64To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个无符号的64位int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeUInt64To(output:IDataOutput,fieldNumber:int,value:String):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint64To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个有符号的64位int ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeSInt64To(output:IDataOutput,fieldNumber:int,value:String):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,VARINT);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//writeRawVarint64To(output,encodeZigZag64(value));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawVarint64To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个32位浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeFloatTo(output:IDataOutput,fieldNumber:int,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,FIXED32);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawLittleEndian32To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个Fixed32数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeFixed32To(output:IDataOutput,fieldNumber:int,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,FIXED32);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawLittleEndian32To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个SFixed32数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeSFixed32To(output:IDataOutput,fieldNumber:int,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,FIXED32);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawLittleEndian32To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个64位浮点数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param vlaue");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeDoubleTo(output:IDataOutput,fieldNumber:int,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,FIXED64);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawLittleEndian64To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个Fixed64数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeFixed64To(output:IDataOutput,fieldNumber:int,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,FIXED64);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawLittleEndian64To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* 写入一个SFixed64数 ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param fieldNumber");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* @param value");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public function writeSFixed64To(output:IDataOutput,fieldNumber:int,value:Number):void");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeTagTo(output,fieldNumber,FIXED64);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writeRawLittleEndian64To(output,value);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
