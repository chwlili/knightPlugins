/*
* generated by Xtext
*/
package org.chw.game.ide.services;

import java.util.List;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;


@Singleton
public class ProtoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPACKAGETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cImportsImportInfoParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOptionsOptionInfoParserRuleCall_2_0 = (RuleCall)cOptionsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cCommAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCommComment_ALLParserRuleCall_4_0 = (RuleCall)cCommAssignment_4.eContents().get(0);
		
		////包定义
		//
		//Model:
		//
		//	(PACKAGE name=QualifiedName END? | imports+=ImportInfo | options+=OptionInfo | elements+=Element |
		//
		//	comm+=Comment_ALL)*;
		public ParserRule getRule() { return rule; }

		//(PACKAGE name=QualifiedName END? | imports+=ImportInfo | options+=OptionInfo | elements+=Element | comm+=Comment_ALL)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//PACKAGE name=QualifiedName END?
		public Group getGroup_0() { return cGroup_0; }

		//PACKAGE
		public RuleCall getPACKAGETerminalRuleCall_0_0() { return cPACKAGETerminalRuleCall_0_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }

		//END?
		public RuleCall getENDTerminalRuleCall_0_2() { return cENDTerminalRuleCall_0_2; }

		//imports+=ImportInfo
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportInfo
		public RuleCall getImportsImportInfoParserRuleCall_1_0() { return cImportsImportInfoParserRuleCall_1_0; }

		//options+=OptionInfo
		public Assignment getOptionsAssignment_2() { return cOptionsAssignment_2; }

		//OptionInfo
		public RuleCall getOptionsOptionInfoParserRuleCall_2_0() { return cOptionsOptionInfoParserRuleCall_2_0; }

		//elements+=Element
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }

		//comm+=Comment_ALL
		public Assignment getCommAssignment_4() { return cCommAssignment_4; }

		//Comment_ALL
		public RuleCall getCommComment_ALLParserRuleCall_4_0() { return cCommComment_ALLParserRuleCall_4_0; }
	}

	public class ImportInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIMPORTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISL_STRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////导入信息
		//
		//ImportInfo:
		//
		//	IMPORT importURI=SL_STRING END?;
		public ParserRule getRule() { return rule; }

		//IMPORT importURI=SL_STRING END?
		public Group getGroup() { return cGroup; }

		//IMPORT
		public RuleCall getIMPORTTerminalRuleCall_0() { return cIMPORTTerminalRuleCall_0; }

		//importURI=SL_STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//SL_STRING
		public RuleCall getImportURISL_STRINGTerminalRuleCall_1_0() { return cImportURISL_STRINGTerminalRuleCall_1_0; }

		//END?
		public RuleCall getENDTerminalRuleCall_2() { return cENDTerminalRuleCall_2; }
	}

	public class OptionInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPTIONTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSL_STRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////参数信息
		//
		//OptionInfo:
		//
		//	OPTION name=ENTITY_NAME EQUALS value=SL_STRING END?;
		public ParserRule getRule() { return rule; }

		//OPTION name=ENTITY_NAME EQUALS value=SL_STRING END?
		public Group getGroup() { return cGroup; }

		//OPTION
		public RuleCall getOPTIONTerminalRuleCall_0() { return cOPTIONTerminalRuleCall_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_1_0() { return cNameENTITY_NAMEParserRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//value=SL_STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//SL_STRING
		public RuleCall getValueSL_STRINGTerminalRuleCall_3_0() { return cValueSL_STRINGTerminalRuleCall_3_0; }

		//END?
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMapParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////元素定义
		//
		//Element:
		//
		//	Type | Map;
		public ParserRule getRule() { return rule; }

		//Type | Map
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Map
		public RuleCall getMapParserRuleCall_1() { return cMapParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////通用定义
		//
		//Type:
		//
		//	MessageType | EnumType;
		public ParserRule getRule() { return rule; }

		//MessageType | EnumType
		public Alternatives getAlternatives() { return cAlternatives; }

		//MessageType
		public RuleCall getMessageTypeParserRuleCall_0() { return cMessageTypeParserRuleCall_0; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_1() { return cEnumTypeParserRuleCall_1; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAP_KINDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cFILETER_ATerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBindAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBindMessageTypeCrossReference_3_0 = (CrossReference)cBindAssignment_3.eContents().get(0);
		private final RuleCall cBindMessageTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cBindMessageTypeCrossReference_3_0.eContents().get(1);
		private final RuleCall cBRACE_LTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cCommAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cCommComment_ALLParserRuleCall_5_0_0 = (RuleCall)cCommAssignment_5_0.eContents().get(0);
		private final Assignment cFieldsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cFieldsMapFieldParserRuleCall_5_1_0 = (RuleCall)cFieldsAssignment_5_1.eContents().get(0);
		private final RuleCall cBRACE_RTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////映射
		//
		//Map:
		//
		//	MAP_KIND name=ENTITY_NAME FILETER_A bind=[MessageType|QualifiedName] BRACE_L (comm+=Comment_ALL | fields+=MapField)*
		//
		//	BRACE_R END?;
		public ParserRule getRule() { return rule; }

		//MAP_KIND name=ENTITY_NAME FILETER_A bind=[MessageType|QualifiedName] BRACE_L (comm+=Comment_ALL | fields+=MapField)*
		//
		//BRACE_R END?
		public Group getGroup() { return cGroup; }

		//MAP_KIND
		public RuleCall getMAP_KINDTerminalRuleCall_0() { return cMAP_KINDTerminalRuleCall_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_1_0() { return cNameENTITY_NAMEParserRuleCall_1_0; }

		//FILETER_A
		public RuleCall getFILETER_ATerminalRuleCall_2() { return cFILETER_ATerminalRuleCall_2; }

		//bind=[MessageType|QualifiedName]
		public Assignment getBindAssignment_3() { return cBindAssignment_3; }

		//[MessageType|QualifiedName]
		public CrossReference getBindMessageTypeCrossReference_3_0() { return cBindMessageTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getBindMessageTypeQualifiedNameParserRuleCall_3_0_1() { return cBindMessageTypeQualifiedNameParserRuleCall_3_0_1; }

		//BRACE_L
		public RuleCall getBRACE_LTerminalRuleCall_4() { return cBRACE_LTerminalRuleCall_4; }

		//(comm+=Comment_ALL | fields+=MapField)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//comm+=Comment_ALL
		public Assignment getCommAssignment_5_0() { return cCommAssignment_5_0; }

		//Comment_ALL
		public RuleCall getCommComment_ALLParserRuleCall_5_0_0() { return cCommComment_ALLParserRuleCall_5_0_0; }

		//fields+=MapField
		public Assignment getFieldsAssignment_5_1() { return cFieldsAssignment_5_1; }

		//MapField
		public RuleCall getFieldsMapFieldParserRuleCall_5_1_0() { return cFieldsMapFieldParserRuleCall_5_1_0; }

		//BRACE_R
		public RuleCall getBRACE_RTerminalRuleCall_6() { return cBRACE_RTerminalRuleCall_6; }

		//END?
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}

	public class MapFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrFIELD_ATTRTerminalRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFILETER_BTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cFilterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFilterMapCrossReference_2_1_0 = (CrossReference)cFilterAssignment_2_1.eContents().get(0);
		private final RuleCall cFilterMapQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cFilterMapCrossReference_2_1_0.eContents().get(1);
		private final RuleCall cFILETER_ATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLinksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinksMapRefParserRuleCall_4_0 = (RuleCall)cLinksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MapField:
		//
		//	attr=FIELD_ATTR name=ENTITY_NAME (FILETER_B filter=[Map|QualifiedName])? FILETER_A links=MapRef END?;
		public ParserRule getRule() { return rule; }

		//attr=FIELD_ATTR name=ENTITY_NAME (FILETER_B filter=[Map|QualifiedName])? FILETER_A links=MapRef END?
		public Group getGroup() { return cGroup; }

		//attr=FIELD_ATTR
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }

		//FIELD_ATTR
		public RuleCall getAttrFIELD_ATTRTerminalRuleCall_0_0() { return cAttrFIELD_ATTRTerminalRuleCall_0_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_1_0() { return cNameENTITY_NAMEParserRuleCall_1_0; }

		//(FILETER_B filter=[Map|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//FILETER_B
		public RuleCall getFILETER_BTerminalRuleCall_2_0() { return cFILETER_BTerminalRuleCall_2_0; }

		//filter=[Map|QualifiedName]
		public Assignment getFilterAssignment_2_1() { return cFilterAssignment_2_1; }

		//[Map|QualifiedName]
		public CrossReference getFilterMapCrossReference_2_1_0() { return cFilterMapCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getFilterMapQualifiedNameParserRuleCall_2_1_0_1() { return cFilterMapQualifiedNameParserRuleCall_2_1_0_1; }

		//FILETER_A
		public RuleCall getFILETER_ATerminalRuleCall_3() { return cFILETER_ATerminalRuleCall_3; }

		//links=MapRef
		public Assignment getLinksAssignment_4() { return cLinksAssignment_4; }

		//MapRef
		public RuleCall getLinksMapRefParserRuleCall_4_0() { return cLinksMapRefParserRuleCall_4_0; }

		//END?
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class MapRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLinkAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLinkMessageFieldCrossReference_0_0 = (CrossReference)cLinkAssignment_0.eContents().get(0);
		private final RuleCall cLinkMessageFieldIDENTITYTerminalRuleCall_0_0_1 = (RuleCall)cLinkMessageFieldCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cChildAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChildMapRefParserRuleCall_1_1_0 = (RuleCall)cChildAssignment_1_1.eContents().get(0);
		
		//MapRef:
		//
		//	link=[MessageField|IDENTITY] (DOT child=MapRef)?;
		public ParserRule getRule() { return rule; }

		//link=[MessageField|IDENTITY] (DOT child=MapRef)?
		public Group getGroup() { return cGroup; }

		//link=[MessageField|IDENTITY]
		public Assignment getLinkAssignment_0() { return cLinkAssignment_0; }

		//[MessageField|IDENTITY]
		public CrossReference getLinkMessageFieldCrossReference_0_0() { return cLinkMessageFieldCrossReference_0_0; }

		//IDENTITY
		public RuleCall getLinkMessageFieldIDENTITYTerminalRuleCall_0_0_1() { return cLinkMessageFieldIDENTITYTerminalRuleCall_0_0_1; }

		//(DOT child=MapRef)?
		public Group getGroup_1() { return cGroup_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }

		//child=MapRef
		public Assignment getChildAssignment_1_1() { return cChildAssignment_1_1; }

		//MapRef
		public RuleCall getChildMapRefParserRuleCall_1_1_0() { return cChildMapRefParserRuleCall_1_1_0; }
	}

	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMESSAGETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBRACE_LTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cCommAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cCommComment_ALLParserRuleCall_3_0_0 = (RuleCall)cCommAssignment_3_0.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFieldsMessageFieldParserRuleCall_3_1_0 = (RuleCall)cFieldsAssignment_3_1.eContents().get(0);
		private final Assignment cTypesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_3_2_0 = (RuleCall)cTypesAssignment_3_2.eContents().get(0);
		private final RuleCall cBRACE_RTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////消息定义
		//
		//MessageType:
		//
		//	MESSAGE name=ENTITY_NAME BRACE_L (comm+=Comment_ALL | fields+=MessageField | types+=Type)* BRACE_R END?;
		public ParserRule getRule() { return rule; }

		//MESSAGE name=ENTITY_NAME BRACE_L (comm+=Comment_ALL | fields+=MessageField | types+=Type)* BRACE_R END?
		public Group getGroup() { return cGroup; }

		//MESSAGE
		public RuleCall getMESSAGETerminalRuleCall_0() { return cMESSAGETerminalRuleCall_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_1_0() { return cNameENTITY_NAMEParserRuleCall_1_0; }

		//BRACE_L
		public RuleCall getBRACE_LTerminalRuleCall_2() { return cBRACE_LTerminalRuleCall_2; }

		//(comm+=Comment_ALL | fields+=MessageField | types+=Type)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//comm+=Comment_ALL
		public Assignment getCommAssignment_3_0() { return cCommAssignment_3_0; }

		//Comment_ALL
		public RuleCall getCommComment_ALLParserRuleCall_3_0_0() { return cCommComment_ALLParserRuleCall_3_0_0; }

		//fields+=MessageField
		public Assignment getFieldsAssignment_3_1() { return cFieldsAssignment_3_1; }

		//MessageField
		public RuleCall getFieldsMessageFieldParserRuleCall_3_1_0() { return cFieldsMessageFieldParserRuleCall_3_1_0; }

		//types+=Type
		public Assignment getTypesAssignment_3_2() { return cTypesAssignment_3_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_3_2_0() { return cTypesTypeParserRuleCall_3_2_0; }

		//BRACE_R
		public RuleCall getBRACE_RTerminalRuleCall_4() { return cBRACE_RTerminalRuleCall_4; }

		//END?
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class MessageFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageSimpleFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageComplexFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MessageField:
		//
		//	MessageSimpleField | MessageComplexField;
		public ParserRule getRule() { return rule; }

		//MessageSimpleField | MessageComplexField
		public Alternatives getAlternatives() { return cAlternatives; }

		//MessageSimpleField
		public RuleCall getMessageSimpleFieldParserRuleCall_0() { return cMessageSimpleFieldParserRuleCall_0; }

		//MessageComplexField
		public RuleCall getMessageComplexFieldParserRuleCall_1() { return cMessageComplexFieldParserRuleCall_1; }
	}

	public class MessageSimpleFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageSimpleField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrFIELD_ATTRTerminalRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeFIELD_TYPETerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cIndexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndexNUMBERTerminalRuleCall_4_0 = (RuleCall)cIndexAssignment_4.eContents().get(0);
		private final RuleCall cMessageFieldDefaultParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//MessageSimpleField:
		//
		//	attr=FIELD_ATTR type=FIELD_TYPE name=ENTITY_NAME EQUALS index=NUMBER MessageFieldDefault? END?;
		public ParserRule getRule() { return rule; }

		//attr=FIELD_ATTR type=FIELD_TYPE name=ENTITY_NAME EQUALS index=NUMBER MessageFieldDefault? END?
		public Group getGroup() { return cGroup; }

		//attr=FIELD_ATTR
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }

		//FIELD_ATTR
		public RuleCall getAttrFIELD_ATTRTerminalRuleCall_0_0() { return cAttrFIELD_ATTRTerminalRuleCall_0_0; }

		//type=FIELD_TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//FIELD_TYPE
		public RuleCall getTypeFIELD_TYPETerminalRuleCall_1_0() { return cTypeFIELD_TYPETerminalRuleCall_1_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_2_0() { return cNameENTITY_NAMEParserRuleCall_2_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_3() { return cEQUALSTerminalRuleCall_3; }

		//index=NUMBER
		public Assignment getIndexAssignment_4() { return cIndexAssignment_4; }

		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_4_0() { return cIndexNUMBERTerminalRuleCall_4_0; }

		//MessageFieldDefault?
		public RuleCall getMessageFieldDefaultParserRuleCall_5() { return cMessageFieldDefaultParserRuleCall_5; }

		//END?
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}

	public class MessageComplexFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageComplexField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrFIELD_ATTRTerminalRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cIndexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndexNUMBERTerminalRuleCall_4_0 = (RuleCall)cIndexAssignment_4.eContents().get(0);
		private final RuleCall cMessageFieldDefaultParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//MessageComplexField:
		//
		//	attr=FIELD_ATTR type=[Type|QualifiedName] name=ENTITY_NAME EQUALS index=NUMBER MessageFieldDefault? END?;
		public ParserRule getRule() { return rule; }

		//attr=FIELD_ATTR type=[Type|QualifiedName] name=ENTITY_NAME EQUALS index=NUMBER MessageFieldDefault? END?
		public Group getGroup() { return cGroup; }

		//attr=FIELD_ATTR
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }

		//FIELD_ATTR
		public RuleCall getAttrFIELD_ATTRTerminalRuleCall_0_0() { return cAttrFIELD_ATTRTerminalRuleCall_0_0; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeTypeQualifiedNameParserRuleCall_1_0_1; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_2_0() { return cNameENTITY_NAMEParserRuleCall_2_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_3() { return cEQUALSTerminalRuleCall_3; }

		//index=NUMBER
		public Assignment getIndexAssignment_4() { return cIndexAssignment_4; }

		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_4_0() { return cIndexNUMBERTerminalRuleCall_4_0; }

		//MessageFieldDefault?
		public RuleCall getMessageFieldDefaultParserRuleCall_5() { return cMessageFieldDefaultParserRuleCall_5; }

		//END?
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}

	public class MessageFieldDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageFieldDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBRACKET_LTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDEFAULT_KINDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cNUMBERTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cIDENTITYTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cBRACKET_RTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//MessageFieldDefault:
		//
		//	BRACKET_L DEFAULT_KIND EQUALS (NUMBER | IDENTITY) BRACKET_R;
		public ParserRule getRule() { return rule; }

		//BRACKET_L DEFAULT_KIND EQUALS (NUMBER | IDENTITY) BRACKET_R
		public Group getGroup() { return cGroup; }

		//BRACKET_L
		public RuleCall getBRACKET_LTerminalRuleCall_0() { return cBRACKET_LTerminalRuleCall_0; }

		//DEFAULT_KIND
		public RuleCall getDEFAULT_KINDTerminalRuleCall_1() { return cDEFAULT_KINDTerminalRuleCall_1; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//NUMBER | IDENTITY
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_3_0() { return cNUMBERTerminalRuleCall_3_0; }

		//IDENTITY
		public RuleCall getIDENTITYTerminalRuleCall_3_1() { return cIDENTITYTerminalRuleCall_3_1; }

		//BRACKET_R
		public RuleCall getBRACKET_RTerminalRuleCall_4() { return cBRACKET_RTerminalRuleCall_4; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cENUMTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cBRACE_LTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cCommAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cCommComment_ALLParserRuleCall_3_0_0 = (RuleCall)cCommAssignment_3_0.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFieldsEnumFieldParserRuleCall_3_1_0 = (RuleCall)cFieldsAssignment_3_1.eContents().get(0);
		private final Assignment cOptionsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cOptionsEnumFieldOptParserRuleCall_3_2_0 = (RuleCall)cOptionsAssignment_3_2.eContents().get(0);
		private final RuleCall cBRACE_RTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////枚举定义
		//
		//EnumType:
		//
		//	ENUM name=ENTITY_NAME BRACE_L (comm+=Comment_ALL | fields+=EnumField | options+=EnumFieldOpt)* BRACE_R END?;
		public ParserRule getRule() { return rule; }

		//ENUM name=ENTITY_NAME BRACE_L (comm+=Comment_ALL | fields+=EnumField | options+=EnumFieldOpt)* BRACE_R END?
		public Group getGroup() { return cGroup; }

		//ENUM
		public RuleCall getENUMTerminalRuleCall_0() { return cENUMTerminalRuleCall_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_1_0() { return cNameENTITY_NAMEParserRuleCall_1_0; }

		//BRACE_L
		public RuleCall getBRACE_LTerminalRuleCall_2() { return cBRACE_LTerminalRuleCall_2; }

		//(comm+=Comment_ALL | fields+=EnumField | options+=EnumFieldOpt)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//comm+=Comment_ALL
		public Assignment getCommAssignment_3_0() { return cCommAssignment_3_0; }

		//Comment_ALL
		public RuleCall getCommComment_ALLParserRuleCall_3_0_0() { return cCommComment_ALLParserRuleCall_3_0_0; }

		//fields+=EnumField
		public Assignment getFieldsAssignment_3_1() { return cFieldsAssignment_3_1; }

		//EnumField
		public RuleCall getFieldsEnumFieldParserRuleCall_3_1_0() { return cFieldsEnumFieldParserRuleCall_3_1_0; }

		//options+=EnumFieldOpt
		public Assignment getOptionsAssignment_3_2() { return cOptionsAssignment_3_2; }

		//EnumFieldOpt
		public RuleCall getOptionsEnumFieldOptParserRuleCall_3_2_0() { return cOptionsEnumFieldOptParserRuleCall_3_2_0; }

		//BRACE_R
		public RuleCall getBRACE_RTerminalRuleCall_4() { return cBRACE_RTerminalRuleCall_4; }

		//END?
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class EnumFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexNUMBERTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EnumField:
		//
		//	name=ENTITY_NAME EQUALS index=NUMBER END?;
		public ParserRule getRule() { return rule; }

		//name=ENTITY_NAME EQUALS index=NUMBER END?
		public Group getGroup() { return cGroup; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_0_0() { return cNameENTITY_NAMEParserRuleCall_0_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_1() { return cEQUALSTerminalRuleCall_1; }

		//index=NUMBER
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_2_0() { return cIndexNUMBERTerminalRuleCall_2_0; }

		//END?
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class EnumFieldOptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumFieldOpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPTIONTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENTITY_NAMEParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDENTITYTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//EnumFieldOpt:
		//
		//	OPTION name=ENTITY_NAME EQUALS value=IDENTITY END?;
		public ParserRule getRule() { return rule; }

		//OPTION name=ENTITY_NAME EQUALS value=IDENTITY END?
		public Group getGroup() { return cGroup; }

		//OPTION
		public RuleCall getOPTIONTerminalRuleCall_0() { return cOPTIONTerminalRuleCall_0; }

		//name=ENTITY_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ENTITY_NAME
		public RuleCall getNameENTITY_NAMEParserRuleCall_1_0() { return cNameENTITY_NAMEParserRuleCall_1_0; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_2() { return cEQUALSTerminalRuleCall_2; }

		//value=IDENTITY
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//IDENTITY
		public RuleCall getValueIDENTITYTerminalRuleCall_3_0() { return cValueIDENTITYTerminalRuleCall_3_0; }

		//END?
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTITYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTITYTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////公用
		//
		//QualifiedName:
		//
		//	IDENTITY (DOT IDENTITY)*;
		public ParserRule getRule() { return rule; }

		//IDENTITY (DOT IDENTITY)*
		public Group getGroup() { return cGroup; }

		//IDENTITY
		public RuleCall getIDENTITYTerminalRuleCall_0() { return cIDENTITYTerminalRuleCall_0; }

		//(DOT IDENTITY)*
		public Group getGroup_1() { return cGroup_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }

		//IDENTITY
		public RuleCall getIDENTITYTerminalRuleCall_1_1() { return cIDENTITYTerminalRuleCall_1_1; }
	}

	public class ENTITY_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENTITY_NAME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFIELD_ATTRTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFIELD_TYPETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTITYTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPACKAGETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIMPORTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOPTIONTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMESSAGETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cENUMTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMAP_KINDTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDEFAULT_KINDTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//ENTITY_NAME:
		//
		//	FIELD_ATTR | FIELD_TYPE | IDENTITY | PACKAGE | IMPORT | OPTION | MESSAGE | ENUM | MAP_KIND | DEFAULT_KIND;
		public ParserRule getRule() { return rule; }

		//FIELD_ATTR | FIELD_TYPE | IDENTITY | PACKAGE | IMPORT | OPTION | MESSAGE | ENUM | MAP_KIND | DEFAULT_KIND
		public Alternatives getAlternatives() { return cAlternatives; }

		//FIELD_ATTR
		public RuleCall getFIELD_ATTRTerminalRuleCall_0() { return cFIELD_ATTRTerminalRuleCall_0; }

		//FIELD_TYPE
		public RuleCall getFIELD_TYPETerminalRuleCall_1() { return cFIELD_TYPETerminalRuleCall_1; }

		//IDENTITY
		public RuleCall getIDENTITYTerminalRuleCall_2() { return cIDENTITYTerminalRuleCall_2; }

		//PACKAGE
		public RuleCall getPACKAGETerminalRuleCall_3() { return cPACKAGETerminalRuleCall_3; }

		//IMPORT
		public RuleCall getIMPORTTerminalRuleCall_4() { return cIMPORTTerminalRuleCall_4; }

		//OPTION
		public RuleCall getOPTIONTerminalRuleCall_5() { return cOPTIONTerminalRuleCall_5; }

		//MESSAGE
		public RuleCall getMESSAGETerminalRuleCall_6() { return cMESSAGETerminalRuleCall_6; }

		//ENUM
		public RuleCall getENUMTerminalRuleCall_7() { return cENUMTerminalRuleCall_7; }

		//MAP_KIND
		public RuleCall getMAP_KINDTerminalRuleCall_8() { return cMAP_KINDTerminalRuleCall_8; }

		//DEFAULT_KIND
		public RuleCall getDEFAULT_KINDTerminalRuleCall_9() { return cDEFAULT_KINDTerminalRuleCall_9; }
	}

	public class Comment_ALLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment_ALL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextCOMMENT_SLTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTextCOMMENT_MLTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Comment_ALL:
		//
		//	text=COMMENT_SL | text=COMMENT_ML;
		public ParserRule getRule() { return rule; }

		//text=COMMENT_SL | text=COMMENT_ML
		public Alternatives getAlternatives() { return cAlternatives; }

		//text=COMMENT_SL
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }

		//COMMENT_SL
		public RuleCall getTextCOMMENT_SLTerminalRuleCall_0_0() { return cTextCOMMENT_SLTerminalRuleCall_0_0; }

		//text=COMMENT_ML
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//COMMENT_ML
		public RuleCall getTextCOMMENT_MLTerminalRuleCall_1_0() { return cTextCOMMENT_MLTerminalRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private ImportInfoElements pImportInfo;
	private OptionInfoElements pOptionInfo;
	private ElementElements pElement;
	private TypeElements pType;
	private MapElements pMap;
	private MapFieldElements pMapField;
	private MapRefElements pMapRef;
	private MessageTypeElements pMessageType;
	private MessageFieldElements pMessageField;
	private MessageSimpleFieldElements pMessageSimpleField;
	private MessageComplexFieldElements pMessageComplexField;
	private MessageFieldDefaultElements pMessageFieldDefault;
	private EnumTypeElements pEnumType;
	private EnumFieldElements pEnumField;
	private EnumFieldOptElements pEnumFieldOpt;
	private QualifiedNameElements pQualifiedName;
	private ENTITY_NAMEElements pENTITY_NAME;
	private Comment_ALLElements pComment_ALL;
	private TerminalRule tBRACE_L;
	private TerminalRule tBRACE_R;
	private TerminalRule tBRACKET_L;
	private TerminalRule tBRACKET_R;
	private TerminalRule tEQUALS;
	private TerminalRule tEND;
	private TerminalRule tDOT;
	private TerminalRule tFILETER_A;
	private TerminalRule tFILETER_B;
	private TerminalRule tNUMBER;
	private TerminalRule tPACKAGE;
	private TerminalRule tIMPORT;
	private TerminalRule tOPTION;
	private TerminalRule tMESSAGE;
	private TerminalRule tENUM;
	private TerminalRule tMAP_KIND;
	private TerminalRule tDEFAULT_KIND;
	private TerminalRule tFIELD_ATTR;
	private TerminalRule tFIELD_TYPE;
	private TerminalRule tIDENTITY;
	private TerminalRule tCOMMENT_ML;
	private TerminalRule tCOMMENT_SL;
	private TerminalRule tSL_STRING;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ProtoGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.chw.game.ide.Proto".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	////包定义
	//
	//Model:
	//
	//	(PACKAGE name=QualifiedName END? | imports+=ImportInfo | options+=OptionInfo | elements+=Element |
	//
	//	comm+=Comment_ALL)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////导入信息
	//
	//ImportInfo:
	//
	//	IMPORT importURI=SL_STRING END?;
	public ImportInfoElements getImportInfoAccess() {
		return (pImportInfo != null) ? pImportInfo : (pImportInfo = new ImportInfoElements());
	}
	
	public ParserRule getImportInfoRule() {
		return getImportInfoAccess().getRule();
	}

	////参数信息
	//
	//OptionInfo:
	//
	//	OPTION name=ENTITY_NAME EQUALS value=SL_STRING END?;
	public OptionInfoElements getOptionInfoAccess() {
		return (pOptionInfo != null) ? pOptionInfo : (pOptionInfo = new OptionInfoElements());
	}
	
	public ParserRule getOptionInfoRule() {
		return getOptionInfoAccess().getRule();
	}

	////元素定义
	//
	//Element:
	//
	//	Type | Map;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	////通用定义
	//
	//Type:
	//
	//	MessageType | EnumType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////映射
	//
	//Map:
	//
	//	MAP_KIND name=ENTITY_NAME FILETER_A bind=[MessageType|QualifiedName] BRACE_L (comm+=Comment_ALL | fields+=MapField)*
	//
	//	BRACE_R END?;
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//MapField:
	//
	//	attr=FIELD_ATTR name=ENTITY_NAME (FILETER_B filter=[Map|QualifiedName])? FILETER_A links=MapRef END?;
	public MapFieldElements getMapFieldAccess() {
		return (pMapField != null) ? pMapField : (pMapField = new MapFieldElements());
	}
	
	public ParserRule getMapFieldRule() {
		return getMapFieldAccess().getRule();
	}

	//MapRef:
	//
	//	link=[MessageField|IDENTITY] (DOT child=MapRef)?;
	public MapRefElements getMapRefAccess() {
		return (pMapRef != null) ? pMapRef : (pMapRef = new MapRefElements());
	}
	
	public ParserRule getMapRefRule() {
		return getMapRefAccess().getRule();
	}

	////消息定义
	//
	//MessageType:
	//
	//	MESSAGE name=ENTITY_NAME BRACE_L (comm+=Comment_ALL | fields+=MessageField | types+=Type)* BRACE_R END?;
	public MessageTypeElements getMessageTypeAccess() {
		return (pMessageType != null) ? pMessageType : (pMessageType = new MessageTypeElements());
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}

	//MessageField:
	//
	//	MessageSimpleField | MessageComplexField;
	public MessageFieldElements getMessageFieldAccess() {
		return (pMessageField != null) ? pMessageField : (pMessageField = new MessageFieldElements());
	}
	
	public ParserRule getMessageFieldRule() {
		return getMessageFieldAccess().getRule();
	}

	//MessageSimpleField:
	//
	//	attr=FIELD_ATTR type=FIELD_TYPE name=ENTITY_NAME EQUALS index=NUMBER MessageFieldDefault? END?;
	public MessageSimpleFieldElements getMessageSimpleFieldAccess() {
		return (pMessageSimpleField != null) ? pMessageSimpleField : (pMessageSimpleField = new MessageSimpleFieldElements());
	}
	
	public ParserRule getMessageSimpleFieldRule() {
		return getMessageSimpleFieldAccess().getRule();
	}

	//MessageComplexField:
	//
	//	attr=FIELD_ATTR type=[Type|QualifiedName] name=ENTITY_NAME EQUALS index=NUMBER MessageFieldDefault? END?;
	public MessageComplexFieldElements getMessageComplexFieldAccess() {
		return (pMessageComplexField != null) ? pMessageComplexField : (pMessageComplexField = new MessageComplexFieldElements());
	}
	
	public ParserRule getMessageComplexFieldRule() {
		return getMessageComplexFieldAccess().getRule();
	}

	//MessageFieldDefault:
	//
	//	BRACKET_L DEFAULT_KIND EQUALS (NUMBER | IDENTITY) BRACKET_R;
	public MessageFieldDefaultElements getMessageFieldDefaultAccess() {
		return (pMessageFieldDefault != null) ? pMessageFieldDefault : (pMessageFieldDefault = new MessageFieldDefaultElements());
	}
	
	public ParserRule getMessageFieldDefaultRule() {
		return getMessageFieldDefaultAccess().getRule();
	}

	////枚举定义
	//
	//EnumType:
	//
	//	ENUM name=ENTITY_NAME BRACE_L (comm+=Comment_ALL | fields+=EnumField | options+=EnumFieldOpt)* BRACE_R END?;
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//EnumField:
	//
	//	name=ENTITY_NAME EQUALS index=NUMBER END?;
	public EnumFieldElements getEnumFieldAccess() {
		return (pEnumField != null) ? pEnumField : (pEnumField = new EnumFieldElements());
	}
	
	public ParserRule getEnumFieldRule() {
		return getEnumFieldAccess().getRule();
	}

	//EnumFieldOpt:
	//
	//	OPTION name=ENTITY_NAME EQUALS value=IDENTITY END?;
	public EnumFieldOptElements getEnumFieldOptAccess() {
		return (pEnumFieldOpt != null) ? pEnumFieldOpt : (pEnumFieldOpt = new EnumFieldOptElements());
	}
	
	public ParserRule getEnumFieldOptRule() {
		return getEnumFieldOptAccess().getRule();
	}

	////公用
	//
	//QualifiedName:
	//
	//	IDENTITY (DOT IDENTITY)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ENTITY_NAME:
	//
	//	FIELD_ATTR | FIELD_TYPE | IDENTITY | PACKAGE | IMPORT | OPTION | MESSAGE | ENUM | MAP_KIND | DEFAULT_KIND;
	public ENTITY_NAMEElements getENTITY_NAMEAccess() {
		return (pENTITY_NAME != null) ? pENTITY_NAME : (pENTITY_NAME = new ENTITY_NAMEElements());
	}
	
	public ParserRule getENTITY_NAMERule() {
		return getENTITY_NAMEAccess().getRule();
	}

	//Comment_ALL:
	//
	//	text=COMMENT_SL | text=COMMENT_ML;
	public Comment_ALLElements getComment_ALLAccess() {
		return (pComment_ALL != null) ? pComment_ALL : (pComment_ALL = new Comment_ALLElements());
	}
	
	public ParserRule getComment_ALLRule() {
		return getComment_ALLAccess().getRule();
	}

	//terminal BRACE_L:
	//
	//	"{";
	public TerminalRule getBRACE_LRule() {
		return (tBRACE_L != null) ? tBRACE_L : (tBRACE_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BRACE_L"));
	} 

	//terminal BRACE_R:
	//
	//	"}";
	public TerminalRule getBRACE_RRule() {
		return (tBRACE_R != null) ? tBRACE_R : (tBRACE_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BRACE_R"));
	} 

	//terminal BRACKET_L:
	//
	//	"[";
	public TerminalRule getBRACKET_LRule() {
		return (tBRACKET_L != null) ? tBRACKET_L : (tBRACKET_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BRACKET_L"));
	} 

	//terminal BRACKET_R:
	//
	//	"]";
	public TerminalRule getBRACKET_RRule() {
		return (tBRACKET_R != null) ? tBRACKET_R : (tBRACKET_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BRACKET_R"));
	} 

	//terminal EQUALS:
	//
	//	"=";
	public TerminalRule getEQUALSRule() {
		return (tEQUALS != null) ? tEQUALS : (tEQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS"));
	} 

	//terminal END:
	//
	//	";";
	public TerminalRule getENDRule() {
		return (tEND != null) ? tEND : (tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END"));
	} 

	//terminal DOT:
	//
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal FILETER_A:
	//
	//	"<=";
	public TerminalRule getFILETER_ARule() {
		return (tFILETER_A != null) ? tFILETER_A : (tFILETER_A = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FILETER_A"));
	} 

	//terminal FILETER_B:
	//
	//	"<-";
	public TerminalRule getFILETER_BRule() {
		return (tFILETER_B != null) ? tFILETER_B : (tFILETER_B = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FILETER_B"));
	} 

	//terminal NUMBER returns ecore::EInt:
	//
	//	"-"? ("0".."9" | "1".."9" "0".."9"+);
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal PACKAGE:
	//
	//	"package";
	public TerminalRule getPACKAGERule() {
		return (tPACKAGE != null) ? tPACKAGE : (tPACKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PACKAGE"));
	} 

	//terminal IMPORT:
	//
	//	"import";
	public TerminalRule getIMPORTRule() {
		return (tIMPORT != null) ? tIMPORT : (tIMPORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IMPORT"));
	} 

	//terminal OPTION:
	//
	//	"option";
	public TerminalRule getOPTIONRule() {
		return (tOPTION != null) ? tOPTION : (tOPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION"));
	} 

	//terminal MESSAGE:
	//
	//	"message";
	public TerminalRule getMESSAGERule() {
		return (tMESSAGE != null) ? tMESSAGE : (tMESSAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MESSAGE"));
	} 

	//terminal ENUM:
	//
	//	"enum";
	public TerminalRule getENUMRule() {
		return (tENUM != null) ? tENUM : (tENUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENUM"));
	} 

	//terminal MAP_KIND:
	//
	//	"map";
	public TerminalRule getMAP_KINDRule() {
		return (tMAP_KIND != null) ? tMAP_KIND : (tMAP_KIND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAP_KIND"));
	} 

	//terminal DEFAULT_KIND:
	//
	//	"default";
	public TerminalRule getDEFAULT_KINDRule() {
		return (tDEFAULT_KIND != null) ? tDEFAULT_KIND : (tDEFAULT_KIND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEFAULT_KIND"));
	} 

	//terminal FIELD_ATTR:
	//
	//	"optional" | "repeated" | "required";
	public TerminalRule getFIELD_ATTRRule() {
		return (tFIELD_ATTR != null) ? tFIELD_ATTR : (tFIELD_ATTR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_ATTR"));
	} 

	//terminal FIELD_TYPE:
	//
	//	"int32" | "sint32" | "uint32" | "int64" | "sint64" | "uint64" | "float" | "double" | "string" | "bool" | "bytes" |
	//
	//	"fixed32" | "fixed64" | "sfixed32" | "sfixed64";
	public TerminalRule getFIELD_TYPERule() {
		return (tFIELD_TYPE != null) ? tFIELD_TYPE : (tFIELD_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_TYPE"));
	} 

	//terminal IDENTITY:
	//
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "0".."9" | "_")*;
	public TerminalRule getIDENTITYRule() {
		return (tIDENTITY != null) ? tIDENTITY : (tIDENTITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTITY"));
	} 

	//terminal COMMENT_ML:
	//
	//	"/ *"->"* /";
	public TerminalRule getCOMMENT_MLRule() {
		return (tCOMMENT_ML != null) ? tCOMMENT_ML : (tCOMMENT_ML = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_ML"));
	} 

	//terminal COMMENT_SL:
	//
	//	"//" !("\n" | "\r")*;
	public TerminalRule getCOMMENT_SLRule() {
		return (tCOMMENT_SL != null) ? tCOMMENT_SL : (tCOMMENT_SL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_SL"));
	} 

	//terminal SL_STRING:
	//
	//	"\"" !("\n" | "\r" | "\"")* "\"";
	public TerminalRule getSL_STRINGRule() {
		return (tSL_STRING != null) ? tSL_STRING : (tSL_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_STRING"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
