grammar org.chw.game.Cfg hidden(WS) //with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate cfg "http://www.chw.org/game/Cfg"

XML2:
	(input=InputDef pack=PackDef | pack=PackDef input=InputDef | pack=PackDef | input=InputDef) ((=> types+=Type) |
	(=> enums+=Enum) | comm+=OtherComent)*;

InputDef:
	comment+=OtherComent* inputCHAR=C_INPUT url=STRING C_SEMICOLON?;

PackDef:
	comment+=OtherComent* packCHAR=C_PACKAGE pack=PackName? C_SEMICOLON?;

Type:
	comment=TypeComment? enter=Enter? prefix=C_TYPE name=TypeName C_BRACE_L ((=> fields+=Field) | comm+=OtherComent)*
	C_BRACE_R;

Enter:
	C_BRACKET_L prefix=C_MAIN C_PAREN_L rootPath=STRING C_PAREN_R C_BRACKET_R;

Field:
	comment=FieldComment? (meta+=ListMeta | meta+=SliceMeta)* type=FieldType fieldName=TypeName C_EQUALS
	nodePath=STRING
	C_SEMICOLON?;

FieldType:
	type=TypeName;

ListMeta:
	C_BRACKET_L prefix=C_LIST (C_PAREN_L (params+=FieldMetaKey (C_COMMA params+=FieldMetaKey)*)? C_PAREN_R)? C_BRACKET_R;

SliceMeta:
	C_BRACKET_L prefix=C_SLICE C_PAREN_L sliceChar=STRING C_PAREN_R C_BRACKET_R;

FieldMetaKey:
	fieldName=TypeName;

Enum:
	comment=TypeComment? prefix=C_ENUM name=TypeName C_BRACE_L ((=> fields+=EnumField) | comm+=OtherComent)* C_BRACE_R;

EnumField:
	comment=FieldComment? fieldName=TypeName C_EQUALS fieldValue=STRING C_SEMICOLON?;

TypeComment:
	COMMENT;

FieldComment:
	COMMENT;

OtherComent:
	comm=COMMENT;

PackName:
	TypeName ('.' TypeName)*;

TypeName:
	C_INPUT | C_MAIN | C_TYPE | C_ENUM | C_INT | C_UINT | C_BOOL | C_NUMBER | C_STRING | C_LIST | C_SLICE | NAME;

terminal C_BRACKET_L:
	'[';

terminal C_BRACKET_R:
	']';

terminal C_PAREN_L:
	'(';

terminal C_PAREN_R:
	')';

terminal C_BRACE_L:
	'{';

terminal C_BRACE_R:
	'}';

terminal C_ANGLE_L:
	'<';

terminal C_ANGLE_R:
	'>';

terminal C_EQUALS:
	'=';

terminal C_COMMA:
	',';

terminal C_SEMICOLON:
	';';

terminal C_INPUT:
	'input';

terminal C_MAIN:
	'Main';

terminal C_TYPE:
	'type';

terminal C_ENUM:
	'enum';

terminal C_INT:
	'int';

terminal C_UINT:
	'uint';

terminal C_BOOL:
	'Boolean';

terminal C_NUMBER:
	'Number';

terminal C_STRING:
	'String';

terminal C_LIST:
	'List';

terminal C_SLICE:
	'Slice';

terminal C_PACKAGE:
	'package';

terminal NAME:
	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$')*;

terminal STRING:
	'"' !('\r' | '\n' | '"')* '"';

terminal fragment COMMENT_END:
	'*/';

terminal COMMENT:
	'/*'->COMMENT_END | '//' !('\r' | '\n')*;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
	