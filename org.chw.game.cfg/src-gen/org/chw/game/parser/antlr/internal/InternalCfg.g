/*
* generated by Xtext
*/
grammar InternalCfg;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.chw.game.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.chw.game.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.chw.game.services.CfgGrammarAccess;

}

@parser::members {

 	private CfgGrammarAccess grammarAccess;
 	
    public InternalCfgParser(TokenStream input, CfgGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "XML2";	
   	}
   	
   	@Override
   	protected CfgGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleXML2
entryRuleXML2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXML2Rule()); }
	 iv_ruleXML2=ruleXML2 
	 { $current=$iv_ruleXML2.current; } 
	 EOF 
;

// Rule XML2
ruleXML2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_0_0_0()); 
	    }
		lv_input_0_0=ruleInputDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_0_0, 
        		"InputDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_0_1_0()); 
	    }
		lv_pack_1_0=rulePackDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		set(
       			$current, 
       			"pack",
        		lv_pack_1_0, 
        		"PackDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_1_0_0()); 
	    }
		lv_pack_2_0=rulePackDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		set(
       			$current, 
       			"pack",
        		lv_pack_2_0, 
        		"PackDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_1_1_0()); 
	    }
		lv_input_3_0=ruleInputDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_3_0, 
        		"InputDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_2_0()); 
	    }
		lv_pack_4_0=rulePackDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		set(
       			$current, 
       			"pack",
        		lv_pack_4_0, 
        		"PackDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_3_0()); 
	    }
		lv_input_5_0=ruleInputDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_5_0, 
        		"InputDef");
	        afterParserOrEnumRuleCall();
	    }

)
))(((
(
ruleType
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getTypesTypeParserRuleCall_1_0_0()); 
	    }
		lv_types_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_6_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXML2Access().getCommOtherComentParserRuleCall_1_1_0()); 
	    }
		lv_comm_7_0=ruleOtherComent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXML2Rule());
	        }
       		add(
       			$current, 
       			"comm",
        		lv_comm_7_0, 
        		"OtherComent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInputDef
entryRuleInputDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputDefRule()); }
	 iv_ruleInputDef=ruleInputDef 
	 { $current=$iv_ruleInputDef.current; } 
	 EOF 
;

// Rule InputDef
ruleInputDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputDefAccess().getCommentOtherComentParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleOtherComent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDefRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"OtherComent");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_inputCHAR_1_0=RULE_C_INPUT
		{
			newLeafNode(lv_inputCHAR_1_0, grammarAccess.getInputDefAccess().getInputCHARC_INPUTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"inputCHAR",
        		lv_inputCHAR_1_0, 
        		"C_INPUT");
	    }

)
)(
(
		lv_url_2_0=RULE_STRING
		{
			newLeafNode(lv_url_2_0, grammarAccess.getInputDefAccess().getUrlSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"url",
        		lv_url_2_0, 
        		"STRING");
	    }

)
)(this_C_SEMICOLON_3=RULE_C_SEMICOLON
    { 
    newLeafNode(this_C_SEMICOLON_3, grammarAccess.getInputDefAccess().getC_SEMICOLONTerminalRuleCall_3()); 
    }
)?)
;





// Entry rule entryRulePackDef
entryRulePackDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackDefRule()); }
	 iv_rulePackDef=rulePackDef 
	 { $current=$iv_rulePackDef.current; } 
	 EOF 
;

// Rule PackDef
rulePackDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPackDefAccess().getCommentOtherComentParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleOtherComent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackDefRule());
	        }
       		add(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"OtherComent");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_packCHAR_1_0=RULE_C_PACKAGE
		{
			newLeafNode(lv_packCHAR_1_0, grammarAccess.getPackDefAccess().getPackCHARC_PACKAGETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"packCHAR",
        		lv_packCHAR_1_0, 
        		"C_PACKAGE");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackDefAccess().getPackPackNameParserRuleCall_2_0()); 
	    }
		lv_pack_2_0=rulePackName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackDefRule());
	        }
       		set(
       			$current, 
       			"pack",
        		lv_pack_2_0, 
        		"PackName");
	        afterParserOrEnumRuleCall();
	    }

)
)?(this_C_SEMICOLON_3=RULE_C_SEMICOLON
    { 
    newLeafNode(this_C_SEMICOLON_3, grammarAccess.getPackDefAccess().getC_SEMICOLONTerminalRuleCall_3()); 
    }
)?)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getCommentTypeCommentParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleTypeComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"TypeComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getEnterEnterParserRuleCall_1_0()); 
	    }
		lv_enter_1_0=ruleEnter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"enter",
        		lv_enter_1_0, 
        		"Enter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_prefix_2_0=RULE_C_TYPE
		{
			newLeafNode(lv_prefix_2_0, grammarAccess.getTypeAccess().getPrefixC_TYPETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_2_0, 
        		"C_TYPE");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getNameTypeNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)this_C_BRACE_L_4=RULE_C_BRACE_L
    { 
    newLeafNode(this_C_BRACE_L_4, grammarAccess.getTypeAccess().getC_BRACE_LTerminalRuleCall_4()); 
    }
(((
(
ruleField
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getFieldsFieldParserRuleCall_5_0_0()); 
	    }
		lv_fields_5_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getCommOtherComentParserRuleCall_5_1_0()); 
	    }
		lv_comm_6_0=ruleOtherComent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		add(
       			$current, 
       			"comm",
        		lv_comm_6_0, 
        		"OtherComent");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_C_BRACE_R_7=RULE_C_BRACE_R
    { 
    newLeafNode(this_C_BRACE_R_7, grammarAccess.getTypeAccess().getC_BRACE_RTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleEnter
entryRuleEnter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnterRule()); }
	 iv_ruleEnter=ruleEnter 
	 { $current=$iv_ruleEnter.current; } 
	 EOF 
;

// Rule Enter
ruleEnter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_C_BRACKET_L_0=RULE_C_BRACKET_L
    { 
    newLeafNode(this_C_BRACKET_L_0, grammarAccess.getEnterAccess().getC_BRACKET_LTerminalRuleCall_0()); 
    }
(
(
		lv_prefix_1_0=RULE_C_MAIN
		{
			newLeafNode(lv_prefix_1_0, grammarAccess.getEnterAccess().getPrefixC_MAINTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_1_0, 
        		"C_MAIN");
	    }

)
)this_C_PAREN_L_2=RULE_C_PAREN_L
    { 
    newLeafNode(this_C_PAREN_L_2, grammarAccess.getEnterAccess().getC_PAREN_LTerminalRuleCall_2()); 
    }
(
(
		lv_rootPath_3_0=RULE_STRING
		{
			newLeafNode(lv_rootPath_3_0, grammarAccess.getEnterAccess().getRootPathSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rootPath",
        		lv_rootPath_3_0, 
        		"STRING");
	    }

)
)this_C_PAREN_R_4=RULE_C_PAREN_R
    { 
    newLeafNode(this_C_PAREN_R_4, grammarAccess.getEnterAccess().getC_PAREN_RTerminalRuleCall_4()); 
    }
this_C_BRACKET_R_5=RULE_C_BRACKET_R
    { 
    newLeafNode(this_C_BRACKET_R_5, grammarAccess.getEnterAccess().getC_BRACKET_RTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getCommentFieldCommentParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleFieldComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"FieldComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getMetaFieldMetaParserRuleCall_1_0()); 
	    }
		lv_meta_1_0=ruleFieldMeta		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"meta",
        		lv_meta_1_0, 
        		"FieldMeta");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getFieldNameTypeNameParserRuleCall_3_0()); 
	    }
		lv_fieldName_3_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"fieldName",
        		lv_fieldName_3_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)this_C_EQUALS_4=RULE_C_EQUALS
    { 
    newLeafNode(this_C_EQUALS_4, grammarAccess.getFieldAccess().getC_EQUALSTerminalRuleCall_4()); 
    }
(
(
		lv_nodePath_5_0=RULE_STRING
		{
			newLeafNode(lv_nodePath_5_0, grammarAccess.getFieldAccess().getNodePathSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nodePath",
        		lv_nodePath_5_0, 
        		"STRING");
	    }

)
)(this_C_SEMICOLON_6=RULE_C_SEMICOLON
    { 
    newLeafNode(this_C_SEMICOLON_6, grammarAccess.getFieldAccess().getC_SEMICOLONTerminalRuleCall_6()); 
    }
)?)
;





// Entry rule entryRuleFieldType
entryRuleFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldTypeRule()); }
	 iv_ruleFieldType=ruleFieldType 
	 { $current=$iv_ruleFieldType.current; } 
	 EOF 
;

// Rule FieldType
ruleFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldTypeAccess().getTypeTypeNameParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFieldMeta
entryRuleFieldMeta returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldMetaRule()); }
	 iv_ruleFieldMeta=ruleFieldMeta 
	 { $current=$iv_ruleFieldMeta.current; } 
	 EOF 
;

// Rule FieldMeta
ruleFieldMeta returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_C_BRACKET_L_0=RULE_C_BRACKET_L
    { 
    newLeafNode(this_C_BRACKET_L_0, grammarAccess.getFieldMetaAccess().getC_BRACKET_LTerminalRuleCall_0()); 
    }
(
(
		lv_prefix_1_0=RULE_C_LIST
		{
			newLeafNode(lv_prefix_1_0, grammarAccess.getFieldMetaAccess().getPrefixC_LISTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldMetaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_1_0, 
        		"C_LIST");
	    }

)
)(this_C_PAREN_L_2=RULE_C_PAREN_L
    { 
    newLeafNode(this_C_PAREN_L_2, grammarAccess.getFieldMetaAccess().getC_PAREN_LTerminalRuleCall_2_0()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldMetaAccess().getParamsFieldMetaKeyParserRuleCall_2_1_0_0()); 
	    }
		lv_params_3_0=ruleFieldMetaKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldMetaRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"FieldMetaKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_C_COMMA_4=RULE_C_COMMA
    { 
    newLeafNode(this_C_COMMA_4, grammarAccess.getFieldMetaAccess().getC_COMMATerminalRuleCall_2_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldMetaAccess().getParamsFieldMetaKeyParserRuleCall_2_1_1_1_0()); 
	    }
		lv_params_5_0=ruleFieldMetaKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldMetaRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"FieldMetaKey");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?this_C_PAREN_R_6=RULE_C_PAREN_R
    { 
    newLeafNode(this_C_PAREN_R_6, grammarAccess.getFieldMetaAccess().getC_PAREN_RTerminalRuleCall_2_2()); 
    }
)?this_C_BRACKET_R_7=RULE_C_BRACKET_R
    { 
    newLeafNode(this_C_BRACKET_R_7, grammarAccess.getFieldMetaAccess().getC_BRACKET_RTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleFieldMetaKey
entryRuleFieldMetaKey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldMetaKeyRule()); }
	 iv_ruleFieldMetaKey=ruleFieldMetaKey 
	 { $current=$iv_ruleFieldMetaKey.current; } 
	 EOF 
;

// Rule FieldMetaKey
ruleFieldMetaKey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldMetaKeyAccess().getFieldNameTypeNameParserRuleCall_0()); 
	    }
		lv_fieldName_0_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldMetaKeyRule());
	        }
       		set(
       			$current, 
       			"fieldName",
        		lv_fieldName_0_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTypeComment
entryRuleTypeComment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeCommentRule()); } 
	 iv_ruleTypeComment=ruleTypeComment 
	 { $current=$iv_ruleTypeComment.current.getText(); }  
	 EOF 
;

// Rule TypeComment
ruleTypeComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_COMMENT_0=RULE_COMMENT    {
		$current.merge(this_COMMENT_0);
    }

    { 
    newLeafNode(this_COMMENT_0, grammarAccess.getTypeCommentAccess().getCOMMENTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFieldComment
entryRuleFieldComment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldCommentRule()); } 
	 iv_ruleFieldComment=ruleFieldComment 
	 { $current=$iv_ruleFieldComment.current.getText(); }  
	 EOF 
;

// Rule FieldComment
ruleFieldComment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_COMMENT_0=RULE_COMMENT    {
		$current.merge(this_COMMENT_0);
    }

    { 
    newLeafNode(this_COMMENT_0, grammarAccess.getFieldCommentAccess().getCOMMENTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleOtherComent
entryRuleOtherComent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherComentRule()); }
	 iv_ruleOtherComent=ruleOtherComent 
	 { $current=$iv_ruleOtherComent.current; } 
	 EOF 
;

// Rule OtherComent
ruleOtherComent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_comm_0_0=RULE_COMMENT
		{
			newLeafNode(lv_comm_0_0, grammarAccess.getOtherComentAccess().getCommCOMMENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOtherComentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comm",
        		lv_comm_0_0, 
        		"COMMENT");
	    }

)
)
;





// Entry rule entryRulePackName
entryRulePackName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackNameRule()); } 
	 iv_rulePackName=rulePackName 
	 { $current=$iv_rulePackName.current.getText(); }  
	 EOF 
;

// Rule PackName
rulePackName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPackNameAccess().getTypeNameParserRuleCall_0()); 
    }
    this_TypeName_0=ruleTypeName    {
		$current.merge(this_TypeName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackNameAccess().getTypeNameParserRuleCall_1_1()); 
    }
    this_TypeName_2=ruleTypeName    {
		$current.merge(this_TypeName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); } 
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current.getText(); }  
	 EOF 
;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_C_INPUT_0=RULE_C_INPUT    {
		$current.merge(this_C_INPUT_0);
    }

    { 
    newLeafNode(this_C_INPUT_0, grammarAccess.getTypeNameAccess().getC_INPUTTerminalRuleCall_0()); 
    }

    |    this_C_MAIN_1=RULE_C_MAIN    {
		$current.merge(this_C_MAIN_1);
    }

    { 
    newLeafNode(this_C_MAIN_1, grammarAccess.getTypeNameAccess().getC_MAINTerminalRuleCall_1()); 
    }

    |    this_C_TYPE_2=RULE_C_TYPE    {
		$current.merge(this_C_TYPE_2);
    }

    { 
    newLeafNode(this_C_TYPE_2, grammarAccess.getTypeNameAccess().getC_TYPETerminalRuleCall_2()); 
    }

    |    this_C_INT_3=RULE_C_INT    {
		$current.merge(this_C_INT_3);
    }

    { 
    newLeafNode(this_C_INT_3, grammarAccess.getTypeNameAccess().getC_INTTerminalRuleCall_3()); 
    }

    |    this_C_UINT_4=RULE_C_UINT    {
		$current.merge(this_C_UINT_4);
    }

    { 
    newLeafNode(this_C_UINT_4, grammarAccess.getTypeNameAccess().getC_UINTTerminalRuleCall_4()); 
    }

    |    this_C_BOOL_5=RULE_C_BOOL    {
		$current.merge(this_C_BOOL_5);
    }

    { 
    newLeafNode(this_C_BOOL_5, grammarAccess.getTypeNameAccess().getC_BOOLTerminalRuleCall_5()); 
    }

    |    this_C_NUMBER_6=RULE_C_NUMBER    {
		$current.merge(this_C_NUMBER_6);
    }

    { 
    newLeafNode(this_C_NUMBER_6, grammarAccess.getTypeNameAccess().getC_NUMBERTerminalRuleCall_6()); 
    }

    |    this_C_STRING_7=RULE_C_STRING    {
		$current.merge(this_C_STRING_7);
    }

    { 
    newLeafNode(this_C_STRING_7, grammarAccess.getTypeNameAccess().getC_STRINGTerminalRuleCall_7()); 
    }

    |    this_C_LIST_8=RULE_C_LIST    {
		$current.merge(this_C_LIST_8);
    }

    { 
    newLeafNode(this_C_LIST_8, grammarAccess.getTypeNameAccess().getC_LISTTerminalRuleCall_8()); 
    }

    |    this_NAME_9=RULE_NAME    {
		$current.merge(this_NAME_9);
    }

    { 
    newLeafNode(this_NAME_9, grammarAccess.getTypeNameAccess().getNAMETerminalRuleCall_9()); 
    }
)
    ;





RULE_C_BRACKET_L : '[';

RULE_C_BRACKET_R : ']';

RULE_C_PAREN_L : '(';

RULE_C_PAREN_R : ')';

RULE_C_BRACE_L : '{';

RULE_C_BRACE_R : '}';

RULE_C_ANGLE_L : '<';

RULE_C_ANGLE_R : '>';

RULE_C_EQUALS : '=';

RULE_C_COMMA : ',';

RULE_C_SEMICOLON : ';';

RULE_C_INPUT : 'input';

RULE_C_MAIN : 'Main';

RULE_C_TYPE : 'type';

RULE_C_INT : 'int';

RULE_C_UINT : 'uint';

RULE_C_BOOL : 'Boolean';

RULE_C_NUMBER : 'Number';

RULE_C_STRING : 'String';

RULE_C_LIST : 'List';

RULE_C_PACKAGE : 'package';

RULE_NAME : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;

RULE_STRING : '"' ~(('\r'|'\n'|'"'))* '"';

fragment RULE_COMMENT_END : '*/';

RULE_COMMENT : ('/*' ( options {greedy=false;} : . )*RULE_COMMENT_END|'//' ~(('\r'|'\n'))*);

RULE_WS : (' '|'\t'|'\r'|'\n')+;


