/*
* generated by Xtext
*/
package org.chw.game.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CfgGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XML2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XML2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cInputAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cInputInputDefParserRuleCall_0_0_0_0 = (RuleCall)cInputAssignment_0_0_0.eContents().get(0);
		private final Assignment cPackAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cPackPackDefParserRuleCall_0_0_1_0 = (RuleCall)cPackAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cPackAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cPackPackDefParserRuleCall_0_1_0_0 = (RuleCall)cPackAssignment_0_1_0.eContents().get(0);
		private final Assignment cInputAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cInputInputDefParserRuleCall_0_1_1_0 = (RuleCall)cInputAssignment_0_1_1.eContents().get(0);
		private final Assignment cPackAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cPackPackDefParserRuleCall_0_2_0 = (RuleCall)cPackAssignment_0_2.eContents().get(0);
		private final Assignment cInputAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cInputInputDefParserRuleCall_0_3_0 = (RuleCall)cInputAssignment_0_3.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_1_0_0 = (RuleCall)cTypesAssignment_1_0.eContents().get(0);
		private final Assignment cEnumsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEnumsEnumParserRuleCall_1_1_0 = (RuleCall)cEnumsAssignment_1_1.eContents().get(0);
		private final Assignment cCommAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cCommOtherComentParserRuleCall_1_2_0 = (RuleCall)cCommAssignment_1_2.eContents().get(0);
		
		//XML2:
		//
		//	(input=InputDef pack=PackDef | pack=PackDef input=InputDef | pack=PackDef | input=InputDef) (=> types+=Type | =>
		//
		//	enums+=Enum | comm+=OtherComent)*;
		public ParserRule getRule() { return rule; }

		//(input=InputDef pack=PackDef | pack=PackDef input=InputDef | pack=PackDef | input=InputDef) (=> types+=Type | =>
		//
		//enums+=Enum | comm+=OtherComent)*
		public Group getGroup() { return cGroup; }

		//input=InputDef pack=PackDef | pack=PackDef input=InputDef | pack=PackDef | input=InputDef
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//input=InputDef pack=PackDef
		public Group getGroup_0_0() { return cGroup_0_0; }

		//input=InputDef
		public Assignment getInputAssignment_0_0_0() { return cInputAssignment_0_0_0; }

		//InputDef
		public RuleCall getInputInputDefParserRuleCall_0_0_0_0() { return cInputInputDefParserRuleCall_0_0_0_0; }

		//pack=PackDef
		public Assignment getPackAssignment_0_0_1() { return cPackAssignment_0_0_1; }

		//PackDef
		public RuleCall getPackPackDefParserRuleCall_0_0_1_0() { return cPackPackDefParserRuleCall_0_0_1_0; }

		//pack=PackDef input=InputDef
		public Group getGroup_0_1() { return cGroup_0_1; }

		//pack=PackDef
		public Assignment getPackAssignment_0_1_0() { return cPackAssignment_0_1_0; }

		//PackDef
		public RuleCall getPackPackDefParserRuleCall_0_1_0_0() { return cPackPackDefParserRuleCall_0_1_0_0; }

		//input=InputDef
		public Assignment getInputAssignment_0_1_1() { return cInputAssignment_0_1_1; }

		//InputDef
		public RuleCall getInputInputDefParserRuleCall_0_1_1_0() { return cInputInputDefParserRuleCall_0_1_1_0; }

		//pack=PackDef
		public Assignment getPackAssignment_0_2() { return cPackAssignment_0_2; }

		//PackDef
		public RuleCall getPackPackDefParserRuleCall_0_2_0() { return cPackPackDefParserRuleCall_0_2_0; }

		//input=InputDef
		public Assignment getInputAssignment_0_3() { return cInputAssignment_0_3; }

		//InputDef
		public RuleCall getInputInputDefParserRuleCall_0_3_0() { return cInputInputDefParserRuleCall_0_3_0; }

		//(=> types+=Type | => enums+=Enum | comm+=OtherComent)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> types+=Type
		public Assignment getTypesAssignment_1_0() { return cTypesAssignment_1_0; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0_0() { return cTypesTypeParserRuleCall_1_0_0; }

		//=> enums+=Enum
		public Assignment getEnumsAssignment_1_1() { return cEnumsAssignment_1_1; }

		//Enum
		public RuleCall getEnumsEnumParserRuleCall_1_1_0() { return cEnumsEnumParserRuleCall_1_1_0; }

		//comm+=OtherComent
		public Assignment getCommAssignment_1_2() { return cCommAssignment_1_2; }

		//OtherComent
		public RuleCall getCommOtherComentParserRuleCall_1_2_0() { return cCommOtherComentParserRuleCall_1_2_0; }
	}

	public class InputDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentOtherComentParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cInputCHARAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputCHARC_INPUTTerminalRuleCall_1_0 = (RuleCall)cInputCHARAssignment_1.eContents().get(0);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final RuleCall cC_SEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//InputDef:
		//
		//	comment+=OtherComent* inputCHAR=C_INPUT url=STRING C_SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//comment+=OtherComent* inputCHAR=C_INPUT url=STRING C_SEMICOLON?
		public Group getGroup() { return cGroup; }

		//comment+=OtherComent*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//OtherComent
		public RuleCall getCommentOtherComentParserRuleCall_0_0() { return cCommentOtherComentParserRuleCall_0_0; }

		//inputCHAR=C_INPUT
		public Assignment getInputCHARAssignment_1() { return cInputCHARAssignment_1; }

		//C_INPUT
		public RuleCall getInputCHARC_INPUTTerminalRuleCall_1_0() { return cInputCHARC_INPUTTerminalRuleCall_1_0; }

		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }

		//C_SEMICOLON?
		public RuleCall getC_SEMICOLONTerminalRuleCall_3() { return cC_SEMICOLONTerminalRuleCall_3; }
	}

	public class PackDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentOtherComentParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cPackCHARAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackCHARC_PACKAGETerminalRuleCall_1_0 = (RuleCall)cPackCHARAssignment_1.eContents().get(0);
		private final Assignment cPackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackPackNameParserRuleCall_2_0 = (RuleCall)cPackAssignment_2.eContents().get(0);
		private final RuleCall cC_SEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PackDef:
		//
		//	comment+=OtherComent* packCHAR=C_PACKAGE pack=PackName? C_SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//comment+=OtherComent* packCHAR=C_PACKAGE pack=PackName? C_SEMICOLON?
		public Group getGroup() { return cGroup; }

		//comment+=OtherComent*
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//OtherComent
		public RuleCall getCommentOtherComentParserRuleCall_0_0() { return cCommentOtherComentParserRuleCall_0_0; }

		//packCHAR=C_PACKAGE
		public Assignment getPackCHARAssignment_1() { return cPackCHARAssignment_1; }

		//C_PACKAGE
		public RuleCall getPackCHARC_PACKAGETerminalRuleCall_1_0() { return cPackCHARC_PACKAGETerminalRuleCall_1_0; }

		//pack=PackName?
		public Assignment getPackAssignment_2() { return cPackAssignment_2; }

		//PackName
		public RuleCall getPackPackNameParserRuleCall_2_0() { return cPackPackNameParserRuleCall_2_0; }

		//C_SEMICOLON?
		public RuleCall getC_SEMICOLONTerminalRuleCall_3() { return cC_SEMICOLONTerminalRuleCall_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentTypeCommentParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cEnterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnterEnterParserRuleCall_1_0 = (RuleCall)cEnterAssignment_1.eContents().get(0);
		private final Assignment cPrefixAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrefixC_TYPETerminalRuleCall_2_0 = (RuleCall)cPrefixAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameTypeNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cC_BRACE_LTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cFieldsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_5_0_0 = (RuleCall)cFieldsAssignment_5_0.eContents().get(0);
		private final Assignment cCommAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cCommOtherComentParserRuleCall_5_1_0 = (RuleCall)cCommAssignment_5_1.eContents().get(0);
		private final RuleCall cC_BRACE_RTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Type:
		//
		//	comment=TypeComment? enter=Enter? prefix=C_TYPE name=TypeName C_BRACE_L (=> fields+=Field | comm+=OtherComent)*
		//
		//	C_BRACE_R;
		public ParserRule getRule() { return rule; }

		//comment=TypeComment? enter=Enter? prefix=C_TYPE name=TypeName C_BRACE_L (=> fields+=Field | comm+=OtherComent)*
		//
		//C_BRACE_R
		public Group getGroup() { return cGroup; }

		//comment=TypeComment?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//TypeComment
		public RuleCall getCommentTypeCommentParserRuleCall_0_0() { return cCommentTypeCommentParserRuleCall_0_0; }

		//enter=Enter?
		public Assignment getEnterAssignment_1() { return cEnterAssignment_1; }

		//Enter
		public RuleCall getEnterEnterParserRuleCall_1_0() { return cEnterEnterParserRuleCall_1_0; }

		//prefix=C_TYPE
		public Assignment getPrefixAssignment_2() { return cPrefixAssignment_2; }

		//C_TYPE
		public RuleCall getPrefixC_TYPETerminalRuleCall_2_0() { return cPrefixC_TYPETerminalRuleCall_2_0; }

		//name=TypeName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//TypeName
		public RuleCall getNameTypeNameParserRuleCall_3_0() { return cNameTypeNameParserRuleCall_3_0; }

		//C_BRACE_L
		public RuleCall getC_BRACE_LTerminalRuleCall_4() { return cC_BRACE_LTerminalRuleCall_4; }

		//(=> fields+=Field | comm+=OtherComent)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//=> fields+=Field
		public Assignment getFieldsAssignment_5_0() { return cFieldsAssignment_5_0; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_0_0() { return cFieldsFieldParserRuleCall_5_0_0; }

		//comm+=OtherComent
		public Assignment getCommAssignment_5_1() { return cCommAssignment_5_1; }

		//OtherComent
		public RuleCall getCommOtherComentParserRuleCall_5_1_0() { return cCommOtherComentParserRuleCall_5_1_0; }

		//C_BRACE_R
		public RuleCall getC_BRACE_RTerminalRuleCall_6() { return cC_BRACE_RTerminalRuleCall_6; }
	}

	public class EnterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cC_BRACKET_LTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixC_MAINTerminalRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final RuleCall cC_PAREN_LTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRootPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRootPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cRootPathAssignment_3.eContents().get(0);
		private final RuleCall cC_PAREN_RTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cC_BRACKET_RTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Enter:
		//
		//	C_BRACKET_L prefix=C_MAIN C_PAREN_L rootPath=STRING C_PAREN_R C_BRACKET_R;
		public ParserRule getRule() { return rule; }

		//C_BRACKET_L prefix=C_MAIN C_PAREN_L rootPath=STRING C_PAREN_R C_BRACKET_R
		public Group getGroup() { return cGroup; }

		//C_BRACKET_L
		public RuleCall getC_BRACKET_LTerminalRuleCall_0() { return cC_BRACKET_LTerminalRuleCall_0; }

		//prefix=C_MAIN
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }

		//C_MAIN
		public RuleCall getPrefixC_MAINTerminalRuleCall_1_0() { return cPrefixC_MAINTerminalRuleCall_1_0; }

		//C_PAREN_L
		public RuleCall getC_PAREN_LTerminalRuleCall_2() { return cC_PAREN_LTerminalRuleCall_2; }

		//rootPath=STRING
		public Assignment getRootPathAssignment_3() { return cRootPathAssignment_3; }

		//STRING
		public RuleCall getRootPathSTRINGTerminalRuleCall_3_0() { return cRootPathSTRINGTerminalRuleCall_3_0; }

		//C_PAREN_R
		public RuleCall getC_PAREN_RTerminalRuleCall_4() { return cC_PAREN_RTerminalRuleCall_4; }

		//C_BRACKET_R
		public RuleCall getC_BRACKET_RTerminalRuleCall_5() { return cC_BRACKET_RTerminalRuleCall_5; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentFieldCommentParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMetaAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMetaListMetaParserRuleCall_1_0_0 = (RuleCall)cMetaAssignment_1_0.eContents().get(0);
		private final Assignment cMetaAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cMetaSliceMetaParserRuleCall_1_1_0 = (RuleCall)cMetaAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFieldTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cFieldNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldNameTypeNameParserRuleCall_3_0 = (RuleCall)cFieldNameAssignment_3.eContents().get(0);
		private final RuleCall cC_EQUALSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cNodePathAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNodePathSTRINGTerminalRuleCall_5_0 = (RuleCall)cNodePathAssignment_5.eContents().get(0);
		private final RuleCall cC_SEMICOLONTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Field:
		//
		//	comment=FieldComment? (meta+=ListMeta | meta+=SliceMeta)* type=FieldType fieldName=TypeName C_EQUALS nodePath=STRING
		//
		//	C_SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//comment=FieldComment? (meta+=ListMeta | meta+=SliceMeta)* type=FieldType fieldName=TypeName C_EQUALS nodePath=STRING
		//
		//C_SEMICOLON?
		public Group getGroup() { return cGroup; }

		//comment=FieldComment?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//FieldComment
		public RuleCall getCommentFieldCommentParserRuleCall_0_0() { return cCommentFieldCommentParserRuleCall_0_0; }

		//(meta+=ListMeta | meta+=SliceMeta)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//meta+=ListMeta
		public Assignment getMetaAssignment_1_0() { return cMetaAssignment_1_0; }

		//ListMeta
		public RuleCall getMetaListMetaParserRuleCall_1_0_0() { return cMetaListMetaParserRuleCall_1_0_0; }

		//meta+=SliceMeta
		public Assignment getMetaAssignment_1_1() { return cMetaAssignment_1_1; }

		//SliceMeta
		public RuleCall getMetaSliceMetaParserRuleCall_1_1_0() { return cMetaSliceMetaParserRuleCall_1_1_0; }

		//type=FieldType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//FieldType
		public RuleCall getTypeFieldTypeParserRuleCall_2_0() { return cTypeFieldTypeParserRuleCall_2_0; }

		//fieldName=TypeName
		public Assignment getFieldNameAssignment_3() { return cFieldNameAssignment_3; }

		//TypeName
		public RuleCall getFieldNameTypeNameParserRuleCall_3_0() { return cFieldNameTypeNameParserRuleCall_3_0; }

		//C_EQUALS
		public RuleCall getC_EQUALSTerminalRuleCall_4() { return cC_EQUALSTerminalRuleCall_4; }

		//nodePath=STRING
		public Assignment getNodePathAssignment_5() { return cNodePathAssignment_5; }

		//STRING
		public RuleCall getNodePathSTRINGTerminalRuleCall_5_0() { return cNodePathSTRINGTerminalRuleCall_5_0; }

		//C_SEMICOLON?
		public RuleCall getC_SEMICOLONTerminalRuleCall_6() { return cC_SEMICOLONTerminalRuleCall_6; }
	}

	public class FieldTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeNameParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//FieldType:
		//
		//	type=TypeName;
		public ParserRule getRule() { return rule; }

		//type=TypeName
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_0() { return cTypeTypeNameParserRuleCall_0; }
	}

	public class ListMetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListMeta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cC_BRACKET_LTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixC_LISTTerminalRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cC_PAREN_LTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamsFieldMetaKeyParserRuleCall_2_1_0_0 = (RuleCall)cParamsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final RuleCall cC_COMMATerminalRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParamsFieldMetaKeyParserRuleCall_2_1_1_1_0 = (RuleCall)cParamsAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cC_PAREN_RTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cC_BRACKET_RTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ListMeta:
		//
		//	C_BRACKET_L prefix=C_LIST (C_PAREN_L (params+=FieldMetaKey (C_COMMA params+=FieldMetaKey)*)? C_PAREN_R)? C_BRACKET_R;
		public ParserRule getRule() { return rule; }

		//C_BRACKET_L prefix=C_LIST (C_PAREN_L (params+=FieldMetaKey (C_COMMA params+=FieldMetaKey)*)? C_PAREN_R)? C_BRACKET_R
		public Group getGroup() { return cGroup; }

		//C_BRACKET_L
		public RuleCall getC_BRACKET_LTerminalRuleCall_0() { return cC_BRACKET_LTerminalRuleCall_0; }

		//prefix=C_LIST
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }

		//C_LIST
		public RuleCall getPrefixC_LISTTerminalRuleCall_1_0() { return cPrefixC_LISTTerminalRuleCall_1_0; }

		//(C_PAREN_L (params+=FieldMetaKey (C_COMMA params+=FieldMetaKey)*)? C_PAREN_R)?
		public Group getGroup_2() { return cGroup_2; }

		//C_PAREN_L
		public RuleCall getC_PAREN_LTerminalRuleCall_2_0() { return cC_PAREN_LTerminalRuleCall_2_0; }

		//(params+=FieldMetaKey (C_COMMA params+=FieldMetaKey)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//params+=FieldMetaKey
		public Assignment getParamsAssignment_2_1_0() { return cParamsAssignment_2_1_0; }

		//FieldMetaKey
		public RuleCall getParamsFieldMetaKeyParserRuleCall_2_1_0_0() { return cParamsFieldMetaKeyParserRuleCall_2_1_0_0; }

		//(C_COMMA params+=FieldMetaKey)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//C_COMMA
		public RuleCall getC_COMMATerminalRuleCall_2_1_1_0() { return cC_COMMATerminalRuleCall_2_1_1_0; }

		//params+=FieldMetaKey
		public Assignment getParamsAssignment_2_1_1_1() { return cParamsAssignment_2_1_1_1; }

		//FieldMetaKey
		public RuleCall getParamsFieldMetaKeyParserRuleCall_2_1_1_1_0() { return cParamsFieldMetaKeyParserRuleCall_2_1_1_1_0; }

		//C_PAREN_R
		public RuleCall getC_PAREN_RTerminalRuleCall_2_2() { return cC_PAREN_RTerminalRuleCall_2_2; }

		//C_BRACKET_R
		public RuleCall getC_BRACKET_RTerminalRuleCall_3() { return cC_BRACKET_RTerminalRuleCall_3; }
	}

	public class SliceMetaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SliceMeta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cC_BRACKET_LTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixC_SLICETerminalRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final RuleCall cC_PAREN_LTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSliceCharAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSliceCharSTRINGTerminalRuleCall_3_0 = (RuleCall)cSliceCharAssignment_3.eContents().get(0);
		private final RuleCall cC_PAREN_RTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cC_BRACKET_RTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//SliceMeta:
		//
		//	C_BRACKET_L prefix=C_SLICE C_PAREN_L sliceChar=STRING C_PAREN_R C_BRACKET_R;
		public ParserRule getRule() { return rule; }

		//C_BRACKET_L prefix=C_SLICE C_PAREN_L sliceChar=STRING C_PAREN_R C_BRACKET_R
		public Group getGroup() { return cGroup; }

		//C_BRACKET_L
		public RuleCall getC_BRACKET_LTerminalRuleCall_0() { return cC_BRACKET_LTerminalRuleCall_0; }

		//prefix=C_SLICE
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }

		//C_SLICE
		public RuleCall getPrefixC_SLICETerminalRuleCall_1_0() { return cPrefixC_SLICETerminalRuleCall_1_0; }

		//C_PAREN_L
		public RuleCall getC_PAREN_LTerminalRuleCall_2() { return cC_PAREN_LTerminalRuleCall_2; }

		//sliceChar=STRING
		public Assignment getSliceCharAssignment_3() { return cSliceCharAssignment_3; }

		//STRING
		public RuleCall getSliceCharSTRINGTerminalRuleCall_3_0() { return cSliceCharSTRINGTerminalRuleCall_3_0; }

		//C_PAREN_R
		public RuleCall getC_PAREN_RTerminalRuleCall_4() { return cC_PAREN_RTerminalRuleCall_4; }

		//C_BRACKET_R
		public RuleCall getC_BRACKET_RTerminalRuleCall_5() { return cC_BRACKET_RTerminalRuleCall_5; }
	}

	public class FieldMetaKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldMetaKey");
		private final Assignment cFieldNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldNameTypeNameParserRuleCall_0 = (RuleCall)cFieldNameAssignment.eContents().get(0);
		
		//FieldMetaKey:
		//
		//	fieldName=TypeName;
		public ParserRule getRule() { return rule; }

		//fieldName=TypeName
		public Assignment getFieldNameAssignment() { return cFieldNameAssignment; }

		//TypeName
		public RuleCall getFieldNameTypeNameParserRuleCall_0() { return cFieldNameTypeNameParserRuleCall_0; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentTypeCommentParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixC_ENUMTerminalRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameTypeNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cC_BRACE_LTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFieldsEnumFieldParserRuleCall_4_0_0 = (RuleCall)cFieldsAssignment_4_0.eContents().get(0);
		private final Assignment cCommAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cCommOtherComentParserRuleCall_4_1_0 = (RuleCall)cCommAssignment_4_1.eContents().get(0);
		private final RuleCall cC_BRACE_RTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Enum:
		//
		//	comment=TypeComment? prefix=C_ENUM name=TypeName C_BRACE_L (=> fields+=EnumField | comm+=OtherComent)* C_BRACE_R;
		public ParserRule getRule() { return rule; }

		//comment=TypeComment? prefix=C_ENUM name=TypeName C_BRACE_L (=> fields+=EnumField | comm+=OtherComent)* C_BRACE_R
		public Group getGroup() { return cGroup; }

		//comment=TypeComment?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//TypeComment
		public RuleCall getCommentTypeCommentParserRuleCall_0_0() { return cCommentTypeCommentParserRuleCall_0_0; }

		//prefix=C_ENUM
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }

		//C_ENUM
		public RuleCall getPrefixC_ENUMTerminalRuleCall_1_0() { return cPrefixC_ENUMTerminalRuleCall_1_0; }

		//name=TypeName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//TypeName
		public RuleCall getNameTypeNameParserRuleCall_2_0() { return cNameTypeNameParserRuleCall_2_0; }

		//C_BRACE_L
		public RuleCall getC_BRACE_LTerminalRuleCall_3() { return cC_BRACE_LTerminalRuleCall_3; }

		//(=> fields+=EnumField | comm+=OtherComent)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//=> fields+=EnumField
		public Assignment getFieldsAssignment_4_0() { return cFieldsAssignment_4_0; }

		//EnumField
		public RuleCall getFieldsEnumFieldParserRuleCall_4_0_0() { return cFieldsEnumFieldParserRuleCall_4_0_0; }

		//comm+=OtherComent
		public Assignment getCommAssignment_4_1() { return cCommAssignment_4_1; }

		//OtherComent
		public RuleCall getCommOtherComentParserRuleCall_4_1_0() { return cCommOtherComentParserRuleCall_4_1_0; }

		//C_BRACE_R
		public RuleCall getC_BRACE_RTerminalRuleCall_5() { return cC_BRACE_RTerminalRuleCall_5; }
	}

	public class EnumFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentFieldCommentParserRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameTypeNameParserRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		private final RuleCall cC_EQUALSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cFieldValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cFieldValueAssignment_3.eContents().get(0);
		private final RuleCall cC_SEMICOLONTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//EnumField:
		//
		//	comment=FieldComment? fieldName=TypeName C_EQUALS fieldValue=STRING C_SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//comment=FieldComment? fieldName=TypeName C_EQUALS fieldValue=STRING C_SEMICOLON?
		public Group getGroup() { return cGroup; }

		//comment=FieldComment?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//FieldComment
		public RuleCall getCommentFieldCommentParserRuleCall_0_0() { return cCommentFieldCommentParserRuleCall_0_0; }

		//fieldName=TypeName
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }

		//TypeName
		public RuleCall getFieldNameTypeNameParserRuleCall_1_0() { return cFieldNameTypeNameParserRuleCall_1_0; }

		//C_EQUALS
		public RuleCall getC_EQUALSTerminalRuleCall_2() { return cC_EQUALSTerminalRuleCall_2; }

		//fieldValue=STRING
		public Assignment getFieldValueAssignment_3() { return cFieldValueAssignment_3; }

		//STRING
		public RuleCall getFieldValueSTRINGTerminalRuleCall_3_0() { return cFieldValueSTRINGTerminalRuleCall_3_0; }

		//C_SEMICOLON?
		public RuleCall getC_SEMICOLONTerminalRuleCall_4() { return cC_SEMICOLONTerminalRuleCall_4; }
	}

	public class TypeCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeComment");
		private final RuleCall cCOMMENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeComment:
		//
		//	COMMENT;
		public ParserRule getRule() { return rule; }

		//COMMENT
		public RuleCall getCOMMENTTerminalRuleCall() { return cCOMMENTTerminalRuleCall; }
	}

	public class FieldCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldComment");
		private final RuleCall cCOMMENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldComment:
		//
		//	COMMENT;
		public ParserRule getRule() { return rule; }

		//COMMENT
		public RuleCall getCOMMENTTerminalRuleCall() { return cCOMMENTTerminalRuleCall; }
	}

	public class OtherComentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherComent");
		private final Assignment cCommAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommCOMMENTTerminalRuleCall_0 = (RuleCall)cCommAssignment.eContents().get(0);
		
		//OtherComent:
		//
		//	comm=COMMENT;
		public ParserRule getRule() { return rule; }

		//comm=COMMENT
		public Assignment getCommAssignment() { return cCommAssignment; }

		//COMMENT
		public RuleCall getCommCOMMENTTerminalRuleCall_0() { return cCommCOMMENTTerminalRuleCall_0; }
	}

	public class PackNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PackName:
		//
		//	TypeName ("." TypeName)*;
		public ParserRule getRule() { return rule; }

		//TypeName ("." TypeName)*
		public Group getGroup() { return cGroup; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }

		//("." TypeName)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//TypeName
		public RuleCall getTypeNameParserRuleCall_1_1() { return cTypeNameParserRuleCall_1_1; }
	}

	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cC_INPUTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cC_MAINTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cC_TYPETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cC_ENUMTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cC_INTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cC_UINTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cC_BOOLTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cC_NUMBERTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cC_STRINGTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cC_LISTTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cC_SLICETerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNAMETerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//TypeName:
		//
		//	C_INPUT | C_MAIN | C_TYPE | C_ENUM | C_INT | C_UINT | C_BOOL | C_NUMBER | C_STRING | C_LIST | C_SLICE | NAME;
		public ParserRule getRule() { return rule; }

		//C_INPUT | C_MAIN | C_TYPE | C_ENUM | C_INT | C_UINT | C_BOOL | C_NUMBER | C_STRING | C_LIST | C_SLICE | NAME
		public Alternatives getAlternatives() { return cAlternatives; }

		//C_INPUT
		public RuleCall getC_INPUTTerminalRuleCall_0() { return cC_INPUTTerminalRuleCall_0; }

		//C_MAIN
		public RuleCall getC_MAINTerminalRuleCall_1() { return cC_MAINTerminalRuleCall_1; }

		//C_TYPE
		public RuleCall getC_TYPETerminalRuleCall_2() { return cC_TYPETerminalRuleCall_2; }

		//C_ENUM
		public RuleCall getC_ENUMTerminalRuleCall_3() { return cC_ENUMTerminalRuleCall_3; }

		//C_INT
		public RuleCall getC_INTTerminalRuleCall_4() { return cC_INTTerminalRuleCall_4; }

		//C_UINT
		public RuleCall getC_UINTTerminalRuleCall_5() { return cC_UINTTerminalRuleCall_5; }

		//C_BOOL
		public RuleCall getC_BOOLTerminalRuleCall_6() { return cC_BOOLTerminalRuleCall_6; }

		//C_NUMBER
		public RuleCall getC_NUMBERTerminalRuleCall_7() { return cC_NUMBERTerminalRuleCall_7; }

		//C_STRING
		public RuleCall getC_STRINGTerminalRuleCall_8() { return cC_STRINGTerminalRuleCall_8; }

		//C_LIST
		public RuleCall getC_LISTTerminalRuleCall_9() { return cC_LISTTerminalRuleCall_9; }

		//C_SLICE
		public RuleCall getC_SLICETerminalRuleCall_10() { return cC_SLICETerminalRuleCall_10; }

		//NAME
		public RuleCall getNAMETerminalRuleCall_11() { return cNAMETerminalRuleCall_11; }
	}
	
	
	private XML2Elements pXML2;
	private InputDefElements pInputDef;
	private PackDefElements pPackDef;
	private TypeElements pType;
	private EnterElements pEnter;
	private FieldElements pField;
	private FieldTypeElements pFieldType;
	private ListMetaElements pListMeta;
	private SliceMetaElements pSliceMeta;
	private FieldMetaKeyElements pFieldMetaKey;
	private EnumElements pEnum;
	private EnumFieldElements pEnumField;
	private TypeCommentElements pTypeComment;
	private FieldCommentElements pFieldComment;
	private OtherComentElements pOtherComent;
	private PackNameElements pPackName;
	private TypeNameElements pTypeName;
	private TerminalRule tC_BRACKET_L;
	private TerminalRule tC_BRACKET_R;
	private TerminalRule tC_PAREN_L;
	private TerminalRule tC_PAREN_R;
	private TerminalRule tC_BRACE_L;
	private TerminalRule tC_BRACE_R;
	private TerminalRule tC_ANGLE_L;
	private TerminalRule tC_ANGLE_R;
	private TerminalRule tC_EQUALS;
	private TerminalRule tC_COMMA;
	private TerminalRule tC_SEMICOLON;
	private TerminalRule tC_INPUT;
	private TerminalRule tC_MAIN;
	private TerminalRule tC_TYPE;
	private TerminalRule tC_ENUM;
	private TerminalRule tC_INT;
	private TerminalRule tC_UINT;
	private TerminalRule tC_BOOL;
	private TerminalRule tC_NUMBER;
	private TerminalRule tC_STRING;
	private TerminalRule tC_LIST;
	private TerminalRule tC_SLICE;
	private TerminalRule tC_PACKAGE;
	private TerminalRule tNAME;
	private TerminalRule tSTRING;
	private TerminalRule tCOMMENT_END;
	private TerminalRule tCOMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public CfgGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.chw.game.Cfg".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//XML2:
	//
	//	(input=InputDef pack=PackDef | pack=PackDef input=InputDef | pack=PackDef | input=InputDef) (=> types+=Type | =>
	//
	//	enums+=Enum | comm+=OtherComent)*;
	public XML2Elements getXML2Access() {
		return (pXML2 != null) ? pXML2 : (pXML2 = new XML2Elements());
	}
	
	public ParserRule getXML2Rule() {
		return getXML2Access().getRule();
	}

	//InputDef:
	//
	//	comment+=OtherComent* inputCHAR=C_INPUT url=STRING C_SEMICOLON?;
	public InputDefElements getInputDefAccess() {
		return (pInputDef != null) ? pInputDef : (pInputDef = new InputDefElements());
	}
	
	public ParserRule getInputDefRule() {
		return getInputDefAccess().getRule();
	}

	//PackDef:
	//
	//	comment+=OtherComent* packCHAR=C_PACKAGE pack=PackName? C_SEMICOLON?;
	public PackDefElements getPackDefAccess() {
		return (pPackDef != null) ? pPackDef : (pPackDef = new PackDefElements());
	}
	
	public ParserRule getPackDefRule() {
		return getPackDefAccess().getRule();
	}

	//Type:
	//
	//	comment=TypeComment? enter=Enter? prefix=C_TYPE name=TypeName C_BRACE_L (=> fields+=Field | comm+=OtherComent)*
	//
	//	C_BRACE_R;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Enter:
	//
	//	C_BRACKET_L prefix=C_MAIN C_PAREN_L rootPath=STRING C_PAREN_R C_BRACKET_R;
	public EnterElements getEnterAccess() {
		return (pEnter != null) ? pEnter : (pEnter = new EnterElements());
	}
	
	public ParserRule getEnterRule() {
		return getEnterAccess().getRule();
	}

	//Field:
	//
	//	comment=FieldComment? (meta+=ListMeta | meta+=SliceMeta)* type=FieldType fieldName=TypeName C_EQUALS nodePath=STRING
	//
	//	C_SEMICOLON?;
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//FieldType:
	//
	//	type=TypeName;
	public FieldTypeElements getFieldTypeAccess() {
		return (pFieldType != null) ? pFieldType : (pFieldType = new FieldTypeElements());
	}
	
	public ParserRule getFieldTypeRule() {
		return getFieldTypeAccess().getRule();
	}

	//ListMeta:
	//
	//	C_BRACKET_L prefix=C_LIST (C_PAREN_L (params+=FieldMetaKey (C_COMMA params+=FieldMetaKey)*)? C_PAREN_R)? C_BRACKET_R;
	public ListMetaElements getListMetaAccess() {
		return (pListMeta != null) ? pListMeta : (pListMeta = new ListMetaElements());
	}
	
	public ParserRule getListMetaRule() {
		return getListMetaAccess().getRule();
	}

	//SliceMeta:
	//
	//	C_BRACKET_L prefix=C_SLICE C_PAREN_L sliceChar=STRING C_PAREN_R C_BRACKET_R;
	public SliceMetaElements getSliceMetaAccess() {
		return (pSliceMeta != null) ? pSliceMeta : (pSliceMeta = new SliceMetaElements());
	}
	
	public ParserRule getSliceMetaRule() {
		return getSliceMetaAccess().getRule();
	}

	//FieldMetaKey:
	//
	//	fieldName=TypeName;
	public FieldMetaKeyElements getFieldMetaKeyAccess() {
		return (pFieldMetaKey != null) ? pFieldMetaKey : (pFieldMetaKey = new FieldMetaKeyElements());
	}
	
	public ParserRule getFieldMetaKeyRule() {
		return getFieldMetaKeyAccess().getRule();
	}

	//Enum:
	//
	//	comment=TypeComment? prefix=C_ENUM name=TypeName C_BRACE_L (=> fields+=EnumField | comm+=OtherComent)* C_BRACE_R;
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumField:
	//
	//	comment=FieldComment? fieldName=TypeName C_EQUALS fieldValue=STRING C_SEMICOLON?;
	public EnumFieldElements getEnumFieldAccess() {
		return (pEnumField != null) ? pEnumField : (pEnumField = new EnumFieldElements());
	}
	
	public ParserRule getEnumFieldRule() {
		return getEnumFieldAccess().getRule();
	}

	//TypeComment:
	//
	//	COMMENT;
	public TypeCommentElements getTypeCommentAccess() {
		return (pTypeComment != null) ? pTypeComment : (pTypeComment = new TypeCommentElements());
	}
	
	public ParserRule getTypeCommentRule() {
		return getTypeCommentAccess().getRule();
	}

	//FieldComment:
	//
	//	COMMENT;
	public FieldCommentElements getFieldCommentAccess() {
		return (pFieldComment != null) ? pFieldComment : (pFieldComment = new FieldCommentElements());
	}
	
	public ParserRule getFieldCommentRule() {
		return getFieldCommentAccess().getRule();
	}

	//OtherComent:
	//
	//	comm=COMMENT;
	public OtherComentElements getOtherComentAccess() {
		return (pOtherComent != null) ? pOtherComent : (pOtherComent = new OtherComentElements());
	}
	
	public ParserRule getOtherComentRule() {
		return getOtherComentAccess().getRule();
	}

	//PackName:
	//
	//	TypeName ("." TypeName)*;
	public PackNameElements getPackNameAccess() {
		return (pPackName != null) ? pPackName : (pPackName = new PackNameElements());
	}
	
	public ParserRule getPackNameRule() {
		return getPackNameAccess().getRule();
	}

	//TypeName:
	//
	//	C_INPUT | C_MAIN | C_TYPE | C_ENUM | C_INT | C_UINT | C_BOOL | C_NUMBER | C_STRING | C_LIST | C_SLICE | NAME;
	public TypeNameElements getTypeNameAccess() {
		return (pTypeName != null) ? pTypeName : (pTypeName = new TypeNameElements());
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}

	//terminal C_BRACKET_L:
	//
	//	"[";
	public TerminalRule getC_BRACKET_LRule() {
		return (tC_BRACKET_L != null) ? tC_BRACKET_L : (tC_BRACKET_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_BRACKET_L"));
	} 

	//terminal C_BRACKET_R:
	//
	//	"]";
	public TerminalRule getC_BRACKET_RRule() {
		return (tC_BRACKET_R != null) ? tC_BRACKET_R : (tC_BRACKET_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_BRACKET_R"));
	} 

	//terminal C_PAREN_L:
	//
	//	"(";
	public TerminalRule getC_PAREN_LRule() {
		return (tC_PAREN_L != null) ? tC_PAREN_L : (tC_PAREN_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_PAREN_L"));
	} 

	//terminal C_PAREN_R:
	//
	//	")";
	public TerminalRule getC_PAREN_RRule() {
		return (tC_PAREN_R != null) ? tC_PAREN_R : (tC_PAREN_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_PAREN_R"));
	} 

	//terminal C_BRACE_L:
	//
	//	"{";
	public TerminalRule getC_BRACE_LRule() {
		return (tC_BRACE_L != null) ? tC_BRACE_L : (tC_BRACE_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_BRACE_L"));
	} 

	//terminal C_BRACE_R:
	//
	//	"}";
	public TerminalRule getC_BRACE_RRule() {
		return (tC_BRACE_R != null) ? tC_BRACE_R : (tC_BRACE_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_BRACE_R"));
	} 

	//terminal C_ANGLE_L:
	//
	//	"<";
	public TerminalRule getC_ANGLE_LRule() {
		return (tC_ANGLE_L != null) ? tC_ANGLE_L : (tC_ANGLE_L = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_ANGLE_L"));
	} 

	//terminal C_ANGLE_R:
	//
	//	">";
	public TerminalRule getC_ANGLE_RRule() {
		return (tC_ANGLE_R != null) ? tC_ANGLE_R : (tC_ANGLE_R = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_ANGLE_R"));
	} 

	//terminal C_EQUALS:
	//
	//	"=";
	public TerminalRule getC_EQUALSRule() {
		return (tC_EQUALS != null) ? tC_EQUALS : (tC_EQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_EQUALS"));
	} 

	//terminal C_COMMA:
	//
	//	",";
	public TerminalRule getC_COMMARule() {
		return (tC_COMMA != null) ? tC_COMMA : (tC_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_COMMA"));
	} 

	//terminal C_SEMICOLON:
	//
	//	";";
	public TerminalRule getC_SEMICOLONRule() {
		return (tC_SEMICOLON != null) ? tC_SEMICOLON : (tC_SEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_SEMICOLON"));
	} 

	//terminal C_INPUT:
	//
	//	"input";
	public TerminalRule getC_INPUTRule() {
		return (tC_INPUT != null) ? tC_INPUT : (tC_INPUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_INPUT"));
	} 

	//terminal C_MAIN:
	//
	//	"Main";
	public TerminalRule getC_MAINRule() {
		return (tC_MAIN != null) ? tC_MAIN : (tC_MAIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_MAIN"));
	} 

	//terminal C_TYPE:
	//
	//	"type";
	public TerminalRule getC_TYPERule() {
		return (tC_TYPE != null) ? tC_TYPE : (tC_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_TYPE"));
	} 

	//terminal C_ENUM:
	//
	//	"enum";
	public TerminalRule getC_ENUMRule() {
		return (tC_ENUM != null) ? tC_ENUM : (tC_ENUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_ENUM"));
	} 

	//terminal C_INT:
	//
	//	"int";
	public TerminalRule getC_INTRule() {
		return (tC_INT != null) ? tC_INT : (tC_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_INT"));
	} 

	//terminal C_UINT:
	//
	//	"uint";
	public TerminalRule getC_UINTRule() {
		return (tC_UINT != null) ? tC_UINT : (tC_UINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_UINT"));
	} 

	//terminal C_BOOL:
	//
	//	"Boolean";
	public TerminalRule getC_BOOLRule() {
		return (tC_BOOL != null) ? tC_BOOL : (tC_BOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_BOOL"));
	} 

	//terminal C_NUMBER:
	//
	//	"Number";
	public TerminalRule getC_NUMBERRule() {
		return (tC_NUMBER != null) ? tC_NUMBER : (tC_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_NUMBER"));
	} 

	//terminal C_STRING:
	//
	//	"String";
	public TerminalRule getC_STRINGRule() {
		return (tC_STRING != null) ? tC_STRING : (tC_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_STRING"));
	} 

	//terminal C_LIST:
	//
	//	"List";
	public TerminalRule getC_LISTRule() {
		return (tC_LIST != null) ? tC_LIST : (tC_LIST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_LIST"));
	} 

	//terminal C_SLICE:
	//
	//	"Slice";
	public TerminalRule getC_SLICERule() {
		return (tC_SLICE != null) ? tC_SLICE : (tC_SLICE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_SLICE"));
	} 

	//terminal C_PACKAGE:
	//
	//	"package";
	public TerminalRule getC_PACKAGERule() {
		return (tC_PACKAGE != null) ? tC_PACKAGE : (tC_PACKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_PACKAGE"));
	} 

	//terminal NAME:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "_")*;
	public TerminalRule getNAMERule() {
		return (tNAME != null) ? tNAME : (tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAME"));
	} 

	//terminal STRING:
	//
	//	"\"" !("\r" | "\n" | "\"")* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal fragment COMMENT_END:
	//
	//	"* /";
	public TerminalRule getCOMMENT_ENDRule() {
		return (tCOMMENT_END != null) ? tCOMMENT_END : (tCOMMENT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_END"));
	} 

	//terminal COMMENT:
	//
	//	"/ *"->COMMENT_END | "//" !("\r" | "\n")*;
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
