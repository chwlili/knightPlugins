/*
* generated by Xtext
*/
grammar InternalCfg;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.chw.game.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.chw.game.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.chw.game.services.CfgGrammarAccess;

}

@parser::members {
 
 	private CfgGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CfgGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleXML2
entryRuleXML2 
:
{ before(grammarAccess.getXML2Rule()); }
	 ruleXML2
{ after(grammarAccess.getXML2Rule()); } 
	 EOF 
;

// Rule XML2
ruleXML2
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXML2Access().getGroup()); }
(rule__XML2__Group__0)
{ after(grammarAccess.getXML2Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputDef
entryRuleInputDef 
:
{ before(grammarAccess.getInputDefRule()); }
	 ruleInputDef
{ after(grammarAccess.getInputDefRule()); } 
	 EOF 
;

// Rule InputDef
ruleInputDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputDefAccess().getGroup()); }
(rule__InputDef__Group__0)
{ after(grammarAccess.getInputDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackDef
entryRulePackDef 
:
{ before(grammarAccess.getPackDefRule()); }
	 rulePackDef
{ after(grammarAccess.getPackDefRule()); } 
	 EOF 
;

// Rule PackDef
rulePackDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackDefAccess().getGroup()); }
(rule__PackDef__Group__0)
{ after(grammarAccess.getPackDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnter
entryRuleEnter 
:
{ before(grammarAccess.getEnterRule()); }
	 ruleEnter
{ after(grammarAccess.getEnterRule()); } 
	 EOF 
;

// Rule Enter
ruleEnter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnterAccess().getGroup()); }
(rule__Enter__Group__0)
{ after(grammarAccess.getEnterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldType
entryRuleFieldType 
:
{ before(grammarAccess.getFieldTypeRule()); }
	 ruleFieldType
{ after(grammarAccess.getFieldTypeRule()); } 
	 EOF 
;

// Rule FieldType
ruleFieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldTypeAccess().getTypeAssignment()); }
(rule__FieldType__TypeAssignment)
{ after(grammarAccess.getFieldTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListMeta
entryRuleListMeta 
:
{ before(grammarAccess.getListMetaRule()); }
	 ruleListMeta
{ after(grammarAccess.getListMetaRule()); } 
	 EOF 
;

// Rule ListMeta
ruleListMeta
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListMetaAccess().getGroup()); }
(rule__ListMeta__Group__0)
{ after(grammarAccess.getListMetaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSliceMeta
entryRuleSliceMeta 
:
{ before(grammarAccess.getSliceMetaRule()); }
	 ruleSliceMeta
{ after(grammarAccess.getSliceMetaRule()); } 
	 EOF 
;

// Rule SliceMeta
ruleSliceMeta
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSliceMetaAccess().getGroup()); }
(rule__SliceMeta__Group__0)
{ after(grammarAccess.getSliceMetaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldMetaKey
entryRuleFieldMetaKey 
:
{ before(grammarAccess.getFieldMetaKeyRule()); }
	 ruleFieldMetaKey
{ after(grammarAccess.getFieldMetaKeyRule()); } 
	 EOF 
;

// Rule FieldMetaKey
ruleFieldMetaKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldMetaKeyAccess().getFieldNameAssignment()); }
(rule__FieldMetaKey__FieldNameAssignment)
{ after(grammarAccess.getFieldMetaKeyAccess().getFieldNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum
entryRuleEnum 
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumAccess().getGroup()); }
(rule__Enum__Group__0)
{ after(grammarAccess.getEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumField
entryRuleEnumField 
:
{ before(grammarAccess.getEnumFieldRule()); }
	 ruleEnumField
{ after(grammarAccess.getEnumFieldRule()); } 
	 EOF 
;

// Rule EnumField
ruleEnumField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumFieldAccess().getGroup()); }
(rule__EnumField__Group__0)
{ after(grammarAccess.getEnumFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeComment
entryRuleTypeComment 
:
{ before(grammarAccess.getTypeCommentRule()); }
	 ruleTypeComment
{ after(grammarAccess.getTypeCommentRule()); } 
	 EOF 
;

// Rule TypeComment
ruleTypeComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeCommentAccess().getCOMMENTTerminalRuleCall()); }
	RULE_COMMENT
{ after(grammarAccess.getTypeCommentAccess().getCOMMENTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldComment
entryRuleFieldComment 
:
{ before(grammarAccess.getFieldCommentRule()); }
	 ruleFieldComment
{ after(grammarAccess.getFieldCommentRule()); } 
	 EOF 
;

// Rule FieldComment
ruleFieldComment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldCommentAccess().getCOMMENTTerminalRuleCall()); }
	RULE_COMMENT
{ after(grammarAccess.getFieldCommentAccess().getCOMMENTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOtherComent
entryRuleOtherComent 
:
{ before(grammarAccess.getOtherComentRule()); }
	 ruleOtherComent
{ after(grammarAccess.getOtherComentRule()); } 
	 EOF 
;

// Rule OtherComent
ruleOtherComent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOtherComentAccess().getCommAssignment()); }
(rule__OtherComent__CommAssignment)
{ after(grammarAccess.getOtherComentAccess().getCommAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackName
entryRulePackName 
:
{ before(grammarAccess.getPackNameRule()); }
	 rulePackName
{ after(grammarAccess.getPackNameRule()); } 
	 EOF 
;

// Rule PackName
rulePackName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackNameAccess().getGroup()); }
(rule__PackName__Group__0)
{ after(grammarAccess.getPackNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getAlternatives()); }
(rule__TypeName__Alternatives)
{ after(grammarAccess.getTypeNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__XML2__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getGroup_0_0()); }
(rule__XML2__Group_0_0__0)
{ after(grammarAccess.getXML2Access().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getXML2Access().getGroup_0_1()); }
(rule__XML2__Group_0_1__0)
{ after(grammarAccess.getXML2Access().getGroup_0_1()); }
)

    |(
{ before(grammarAccess.getXML2Access().getPackAssignment_0_2()); }
(rule__XML2__PackAssignment_0_2)
{ after(grammarAccess.getXML2Access().getPackAssignment_0_2()); }
)

    |(
{ before(grammarAccess.getXML2Access().getInputAssignment_0_3()); }
(rule__XML2__InputAssignment_0_3)
{ after(grammarAccess.getXML2Access().getInputAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getTypesAssignment_1_0()); }
(rule__XML2__TypesAssignment_1_0)
{ after(grammarAccess.getXML2Access().getTypesAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getXML2Access().getEnumsAssignment_1_1()); }
(rule__XML2__EnumsAssignment_1_1)
{ after(grammarAccess.getXML2Access().getEnumsAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getXML2Access().getCommAssignment_1_2()); }
(rule__XML2__CommAssignment_1_2)
{ after(grammarAccess.getXML2Access().getCommAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getFieldsAssignment_5_0()); }
(rule__Type__FieldsAssignment_5_0)
{ after(grammarAccess.getTypeAccess().getFieldsAssignment_5_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getCommAssignment_5_1()); }
(rule__Type__CommAssignment_5_1)
{ after(grammarAccess.getTypeAccess().getCommAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getMetaAssignment_1_0()); }
(rule__Field__MetaAssignment_1_0)
{ after(grammarAccess.getFieldAccess().getMetaAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getFieldAccess().getMetaAssignment_1_1()); }
(rule__Field__MetaAssignment_1_1)
{ after(grammarAccess.getFieldAccess().getMetaAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getFieldsAssignment_4_0()); }
(rule__Enum__FieldsAssignment_4_0)
{ after(grammarAccess.getEnumAccess().getFieldsAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getEnumAccess().getCommAssignment_4_1()); }
(rule__Enum__CommAssignment_4_1)
{ after(grammarAccess.getEnumAccess().getCommAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getC_INPUTTerminalRuleCall_0()); }
	RULE_C_INPUT
{ after(grammarAccess.getTypeNameAccess().getC_INPUTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_MAINTerminalRuleCall_1()); }
	RULE_C_MAIN
{ after(grammarAccess.getTypeNameAccess().getC_MAINTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_TYPETerminalRuleCall_2()); }
	RULE_C_TYPE
{ after(grammarAccess.getTypeNameAccess().getC_TYPETerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_ENUMTerminalRuleCall_3()); }
	RULE_C_ENUM
{ after(grammarAccess.getTypeNameAccess().getC_ENUMTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_INTTerminalRuleCall_4()); }
	RULE_C_INT
{ after(grammarAccess.getTypeNameAccess().getC_INTTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_UINTTerminalRuleCall_5()); }
	RULE_C_UINT
{ after(grammarAccess.getTypeNameAccess().getC_UINTTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_BOOLTerminalRuleCall_6()); }
	RULE_C_BOOL
{ after(grammarAccess.getTypeNameAccess().getC_BOOLTerminalRuleCall_6()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_NUMBERTerminalRuleCall_7()); }
	RULE_C_NUMBER
{ after(grammarAccess.getTypeNameAccess().getC_NUMBERTerminalRuleCall_7()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_STRINGTerminalRuleCall_8()); }
	RULE_C_STRING
{ after(grammarAccess.getTypeNameAccess().getC_STRINGTerminalRuleCall_8()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_LISTTerminalRuleCall_9()); }
	RULE_C_LIST
{ after(grammarAccess.getTypeNameAccess().getC_LISTTerminalRuleCall_9()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getC_SLICETerminalRuleCall_10()); }
	RULE_C_SLICE
{ after(grammarAccess.getTypeNameAccess().getC_SLICETerminalRuleCall_10()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getNAMETerminalRuleCall_11()); }
	RULE_NAME
{ after(grammarAccess.getTypeNameAccess().getNAMETerminalRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__XML2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XML2__Group__0__Impl
	rule__XML2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getAlternatives_0()); }
(rule__XML2__Alternatives_0)
{ after(grammarAccess.getXML2Access().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XML2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XML2__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getAlternatives_1()); }
(rule__XML2__Alternatives_1)*
{ after(grammarAccess.getXML2Access().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XML2__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XML2__Group_0_0__0__Impl
	rule__XML2__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getInputAssignment_0_0_0()); }
(rule__XML2__InputAssignment_0_0_0)
{ after(grammarAccess.getXML2Access().getInputAssignment_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XML2__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XML2__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getPackAssignment_0_0_1()); }
(rule__XML2__PackAssignment_0_0_1)
{ after(grammarAccess.getXML2Access().getPackAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XML2__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XML2__Group_0_1__0__Impl
	rule__XML2__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getPackAssignment_0_1_0()); }
(rule__XML2__PackAssignment_0_1_0)
{ after(grammarAccess.getXML2Access().getPackAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XML2__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XML2__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getInputAssignment_0_1_1()); }
(rule__XML2__InputAssignment_0_1_1)
{ after(grammarAccess.getXML2Access().getInputAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InputDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDef__Group__0__Impl
	rule__InputDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getCommentAssignment_0()); }
(rule__InputDef__CommentAssignment_0)*
{ after(grammarAccess.getInputDefAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDef__Group__1__Impl
	rule__InputDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getInputCHARAssignment_1()); }
(rule__InputDef__InputCHARAssignment_1)
{ after(grammarAccess.getInputDefAccess().getInputCHARAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDef__Group__2__Impl
	rule__InputDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getUrlAssignment_2()); }
(rule__InputDef__UrlAssignment_2)
{ after(grammarAccess.getInputDefAccess().getUrlAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getC_SEMICOLONTerminalRuleCall_3()); }
(	RULE_C_SEMICOLON)?
{ after(grammarAccess.getInputDefAccess().getC_SEMICOLONTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PackDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackDef__Group__0__Impl
	rule__PackDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getCommentAssignment_0()); }
(rule__PackDef__CommentAssignment_0)*
{ after(grammarAccess.getPackDefAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackDef__Group__1__Impl
	rule__PackDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getPackCHARAssignment_1()); }
(rule__PackDef__PackCHARAssignment_1)
{ after(grammarAccess.getPackDefAccess().getPackCHARAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackDef__Group__2__Impl
	rule__PackDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getPackAssignment_2()); }
(rule__PackDef__PackAssignment_2)?
{ after(grammarAccess.getPackDefAccess().getPackAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getC_SEMICOLONTerminalRuleCall_3()); }
(	RULE_C_SEMICOLON)?
{ after(grammarAccess.getPackDefAccess().getC_SEMICOLONTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCommentAssignment_0()); }
(rule__Type__CommentAssignment_0)?
{ after(grammarAccess.getTypeAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
	rule__Type__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getEnterAssignment_1()); }
(rule__Type__EnterAssignment_1)?
{ after(grammarAccess.getTypeAccess().getEnterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__2__Impl
	rule__Type__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrefixAssignment_2()); }
(rule__Type__PrefixAssignment_2)
{ after(grammarAccess.getTypeAccess().getPrefixAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__3__Impl
	rule__Type__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_3()); }
(rule__Type__NameAssignment_3)
{ after(grammarAccess.getTypeAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__4__Impl
	rule__Type__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getC_BRACE_LTerminalRuleCall_4()); }
	RULE_C_BRACE_L
{ after(grammarAccess.getTypeAccess().getC_BRACE_LTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__5__Impl
	rule__Type__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives_5()); }
(rule__Type__Alternatives_5)*
{ after(grammarAccess.getTypeAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getC_BRACE_RTerminalRuleCall_6()); }
	RULE_C_BRACE_R
{ after(grammarAccess.getTypeAccess().getC_BRACE_RTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Enter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enter__Group__0__Impl
	rule__Enter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getC_BRACKET_LTerminalRuleCall_0()); }
	RULE_C_BRACKET_L
{ after(grammarAccess.getEnterAccess().getC_BRACKET_LTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enter__Group__1__Impl
	rule__Enter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getPrefixAssignment_1()); }
(rule__Enter__PrefixAssignment_1)
{ after(grammarAccess.getEnterAccess().getPrefixAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enter__Group__2__Impl
	rule__Enter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getC_PAREN_LTerminalRuleCall_2()); }
	RULE_C_PAREN_L
{ after(grammarAccess.getEnterAccess().getC_PAREN_LTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enter__Group__3__Impl
	rule__Enter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getRootPathAssignment_3()); }
(rule__Enter__RootPathAssignment_3)
{ after(grammarAccess.getEnterAccess().getRootPathAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enter__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enter__Group__4__Impl
	rule__Enter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getC_PAREN_RTerminalRuleCall_4()); }
	RULE_C_PAREN_R
{ after(grammarAccess.getEnterAccess().getC_PAREN_RTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enter__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enter__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getC_BRACKET_RTerminalRuleCall_5()); }
	RULE_C_BRACKET_R
{ after(grammarAccess.getEnterAccess().getC_BRACKET_RTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getCommentAssignment_0()); }
(rule__Field__CommentAssignment_0)?
{ after(grammarAccess.getFieldAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getAlternatives_1()); }
(rule__Field__Alternatives_1)*
{ after(grammarAccess.getFieldAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_2()); }
(rule__Field__TypeAssignment_2)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
	rule__Field__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getFieldNameAssignment_3()); }
(rule__Field__FieldNameAssignment_3)
{ after(grammarAccess.getFieldAccess().getFieldNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__4__Impl
	rule__Field__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getC_EQUALSTerminalRuleCall_4()); }
	RULE_C_EQUALS
{ after(grammarAccess.getFieldAccess().getC_EQUALSTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__5__Impl
	rule__Field__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNodePathAssignment_5()); }
(rule__Field__NodePathAssignment_5)
{ after(grammarAccess.getFieldAccess().getNodePathAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getC_SEMICOLONTerminalRuleCall_6()); }
(	RULE_C_SEMICOLON)?
{ after(grammarAccess.getFieldAccess().getC_SEMICOLONTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ListMeta__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group__0__Impl
	rule__ListMeta__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getC_BRACKET_LTerminalRuleCall_0()); }
	RULE_C_BRACKET_L
{ after(grammarAccess.getListMetaAccess().getC_BRACKET_LTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group__1__Impl
	rule__ListMeta__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getPrefixAssignment_1()); }
(rule__ListMeta__PrefixAssignment_1)
{ after(grammarAccess.getListMetaAccess().getPrefixAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group__2__Impl
	rule__ListMeta__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getGroup_2()); }
(rule__ListMeta__Group_2__0)?
{ after(grammarAccess.getListMetaAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getC_BRACKET_RTerminalRuleCall_3()); }
	RULE_C_BRACKET_R
{ after(grammarAccess.getListMetaAccess().getC_BRACKET_RTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ListMeta__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2__0__Impl
	rule__ListMeta__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getC_PAREN_LTerminalRuleCall_2_0()); }
	RULE_C_PAREN_L
{ after(grammarAccess.getListMetaAccess().getC_PAREN_LTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2__1__Impl
	rule__ListMeta__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getGroup_2_1()); }
(rule__ListMeta__Group_2_1__0)?
{ after(grammarAccess.getListMetaAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getC_PAREN_RTerminalRuleCall_2_2()); }
	RULE_C_PAREN_R
{ after(grammarAccess.getListMetaAccess().getC_PAREN_RTerminalRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ListMeta__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2_1__0__Impl
	rule__ListMeta__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getParamsAssignment_2_1_0()); }
(rule__ListMeta__ParamsAssignment_2_1_0)
{ after(grammarAccess.getListMetaAccess().getParamsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getGroup_2_1_1()); }
(rule__ListMeta__Group_2_1_1__0)*
{ after(grammarAccess.getListMetaAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListMeta__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2_1_1__0__Impl
	rule__ListMeta__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getC_COMMATerminalRuleCall_2_1_1_0()); }
	RULE_C_COMMA
{ after(grammarAccess.getListMetaAccess().getC_COMMATerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListMeta__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListMeta__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getParamsAssignment_2_1_1_1()); }
(rule__ListMeta__ParamsAssignment_2_1_1_1)
{ after(grammarAccess.getListMetaAccess().getParamsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SliceMeta__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceMeta__Group__0__Impl
	rule__SliceMeta__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getC_BRACKET_LTerminalRuleCall_0()); }
	RULE_C_BRACKET_L
{ after(grammarAccess.getSliceMetaAccess().getC_BRACKET_LTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceMeta__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceMeta__Group__1__Impl
	rule__SliceMeta__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getPrefixAssignment_1()); }
(rule__SliceMeta__PrefixAssignment_1)
{ after(grammarAccess.getSliceMetaAccess().getPrefixAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceMeta__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceMeta__Group__2__Impl
	rule__SliceMeta__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getC_PAREN_LTerminalRuleCall_2()); }
	RULE_C_PAREN_L
{ after(grammarAccess.getSliceMetaAccess().getC_PAREN_LTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceMeta__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceMeta__Group__3__Impl
	rule__SliceMeta__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getSliceCharAssignment_3()); }
(rule__SliceMeta__SliceCharAssignment_3)
{ after(grammarAccess.getSliceMetaAccess().getSliceCharAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceMeta__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceMeta__Group__4__Impl
	rule__SliceMeta__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getC_PAREN_RTerminalRuleCall_4()); }
	RULE_C_PAREN_R
{ after(grammarAccess.getSliceMetaAccess().getC_PAREN_RTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceMeta__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceMeta__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getC_BRACKET_RTerminalRuleCall_5()); }
	RULE_C_BRACKET_R
{ after(grammarAccess.getSliceMetaAccess().getC_BRACKET_RTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Enum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getCommentAssignment_0()); }
(rule__Enum__CommentAssignment_0)?
{ after(grammarAccess.getEnumAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getPrefixAssignment_1()); }
(rule__Enum__PrefixAssignment_1)
{ after(grammarAccess.getEnumAccess().getPrefixAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__2__Impl
	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getNameAssignment_2()); }
(rule__Enum__NameAssignment_2)
{ after(grammarAccess.getEnumAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__3__Impl
	rule__Enum__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getC_BRACE_LTerminalRuleCall_3()); }
	RULE_C_BRACE_L
{ after(grammarAccess.getEnumAccess().getC_BRACE_LTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__4__Impl
	rule__Enum__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getAlternatives_4()); }
(rule__Enum__Alternatives_4)*
{ after(grammarAccess.getEnumAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enum__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getC_BRACE_RTerminalRuleCall_5()); }
	RULE_C_BRACE_R
{ after(grammarAccess.getEnumAccess().getC_BRACE_RTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EnumField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumField__Group__0__Impl
	rule__EnumField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getCommentAssignment_0()); }
(rule__EnumField__CommentAssignment_0)?
{ after(grammarAccess.getEnumFieldAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumField__Group__1__Impl
	rule__EnumField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getFieldNameAssignment_1()); }
(rule__EnumField__FieldNameAssignment_1)
{ after(grammarAccess.getEnumFieldAccess().getFieldNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumField__Group__2__Impl
	rule__EnumField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getC_EQUALSTerminalRuleCall_2()); }
	RULE_C_EQUALS
{ after(grammarAccess.getEnumFieldAccess().getC_EQUALSTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumField__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumField__Group__3__Impl
	rule__EnumField__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getFieldValueAssignment_3()); }
(rule__EnumField__FieldValueAssignment_3)
{ after(grammarAccess.getEnumFieldAccess().getFieldValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumField__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumField__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getC_SEMICOLONTerminalRuleCall_4()); }
(	RULE_C_SEMICOLON)?
{ after(grammarAccess.getEnumFieldAccess().getC_SEMICOLONTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PackName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackName__Group__0__Impl
	rule__PackName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackNameAccess().getTypeNameParserRuleCall_0()); }
	ruleTypeName
{ after(grammarAccess.getPackNameAccess().getTypeNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackNameAccess().getGroup_1()); }
(rule__PackName__Group_1__0)*
{ after(grammarAccess.getPackNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackName__Group_1__0__Impl
	rule__PackName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getPackNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackNameAccess().getTypeNameParserRuleCall_1_1()); }
	ruleTypeName
{ after(grammarAccess.getPackNameAccess().getTypeNameParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__XML2__InputAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_0_0_0()); }
	ruleInputDef{ after(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__PackAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_0_1_0()); }
	rulePackDef{ after(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__PackAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_1_0_0()); }
	rulePackDef{ after(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__InputAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_1_1_0()); }
	ruleInputDef{ after(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__PackAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_2_0()); }
	rulePackDef{ after(grammarAccess.getXML2Access().getPackPackDefParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__InputAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_3_0()); }
	ruleInputDef{ after(grammarAccess.getXML2Access().getInputInputDefParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__TypesAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getTypesTypeParserRuleCall_1_0_0()); }
	ruleType{ after(grammarAccess.getXML2Access().getTypesTypeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__EnumsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getEnumsEnumParserRuleCall_1_1_0()); }
	ruleEnum{ after(grammarAccess.getXML2Access().getEnumsEnumParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XML2__CommAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXML2Access().getCommOtherComentParserRuleCall_1_2_0()); }
	ruleOtherComent{ after(grammarAccess.getXML2Access().getCommOtherComentParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getCommentOtherComentParserRuleCall_0_0()); }
	ruleOtherComent{ after(grammarAccess.getInputDefAccess().getCommentOtherComentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__InputCHARAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getInputCHARC_INPUTTerminalRuleCall_1_0()); }
	RULE_C_INPUT{ after(grammarAccess.getInputDefAccess().getInputCHARC_INPUTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputDef__UrlAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputDefAccess().getUrlSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getInputDefAccess().getUrlSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getCommentOtherComentParserRuleCall_0_0()); }
	ruleOtherComent{ after(grammarAccess.getPackDefAccess().getCommentOtherComentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__PackCHARAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getPackCHARC_PACKAGETerminalRuleCall_1_0()); }
	RULE_C_PACKAGE{ after(grammarAccess.getPackDefAccess().getPackCHARC_PACKAGETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackDef__PackAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackDefAccess().getPackPackNameParserRuleCall_2_0()); }
	rulePackName{ after(grammarAccess.getPackDefAccess().getPackPackNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCommentTypeCommentParserRuleCall_0_0()); }
	ruleTypeComment{ after(grammarAccess.getTypeAccess().getCommentTypeCommentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__EnterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getEnterEnterParserRuleCall_1_0()); }
	ruleEnter{ after(grammarAccess.getTypeAccess().getEnterEnterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__PrefixAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrefixC_TYPETerminalRuleCall_2_0()); }
	RULE_C_TYPE{ after(grammarAccess.getTypeAccess().getPrefixC_TYPETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameTypeNameParserRuleCall_3_0()); }
	ruleTypeName{ after(grammarAccess.getTypeAccess().getNameTypeNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__FieldsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getFieldsFieldParserRuleCall_5_0_0()); }
	ruleField{ after(grammarAccess.getTypeAccess().getFieldsFieldParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__CommAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCommOtherComentParserRuleCall_5_1_0()); }
	ruleOtherComent{ after(grammarAccess.getTypeAccess().getCommOtherComentParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__PrefixAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getPrefixC_MAINTerminalRuleCall_1_0()); }
	RULE_C_MAIN{ after(grammarAccess.getEnterAccess().getPrefixC_MAINTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enter__RootPathAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnterAccess().getRootPathSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getEnterAccess().getRootPathSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getCommentFieldCommentParserRuleCall_0_0()); }
	ruleFieldComment{ after(grammarAccess.getFieldAccess().getCommentFieldCommentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__MetaAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getMetaListMetaParserRuleCall_1_0_0()); }
	ruleListMeta{ after(grammarAccess.getFieldAccess().getMetaListMetaParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__MetaAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getMetaSliceMetaParserRuleCall_1_1_0()); }
	ruleSliceMeta{ after(grammarAccess.getFieldAccess().getMetaSliceMetaParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_2_0()); }
	ruleFieldType{ after(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__FieldNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getFieldNameTypeNameParserRuleCall_3_0()); }
	ruleTypeName{ after(grammarAccess.getFieldAccess().getFieldNameTypeNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NodePathAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNodePathSTRINGTerminalRuleCall_5_0()); }
	RULE_STRING{ after(grammarAccess.getFieldAccess().getNodePathSTRINGTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getTypeTypeNameParserRuleCall_0()); }
	ruleTypeName{ after(grammarAccess.getFieldTypeAccess().getTypeTypeNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__PrefixAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getPrefixC_LISTTerminalRuleCall_1_0()); }
	RULE_C_LIST{ after(grammarAccess.getListMetaAccess().getPrefixC_LISTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__ParamsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getParamsFieldMetaKeyParserRuleCall_2_1_0_0()); }
	ruleFieldMetaKey{ after(grammarAccess.getListMetaAccess().getParamsFieldMetaKeyParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListMeta__ParamsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListMetaAccess().getParamsFieldMetaKeyParserRuleCall_2_1_1_1_0()); }
	ruleFieldMetaKey{ after(grammarAccess.getListMetaAccess().getParamsFieldMetaKeyParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__PrefixAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getPrefixC_SLICETerminalRuleCall_1_0()); }
	RULE_C_SLICE{ after(grammarAccess.getSliceMetaAccess().getPrefixC_SLICETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SliceMeta__SliceCharAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceMetaAccess().getSliceCharSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getSliceMetaAccess().getSliceCharSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldMetaKey__FieldNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldMetaKeyAccess().getFieldNameTypeNameParserRuleCall_0()); }
	ruleTypeName{ after(grammarAccess.getFieldMetaKeyAccess().getFieldNameTypeNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getCommentTypeCommentParserRuleCall_0_0()); }
	ruleTypeComment{ after(grammarAccess.getEnumAccess().getCommentTypeCommentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__PrefixAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getPrefixC_ENUMTerminalRuleCall_1_0()); }
	RULE_C_ENUM{ after(grammarAccess.getEnumAccess().getPrefixC_ENUMTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getNameTypeNameParserRuleCall_2_0()); }
	ruleTypeName{ after(grammarAccess.getEnumAccess().getNameTypeNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__FieldsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getFieldsEnumFieldParserRuleCall_4_0_0()); }
	ruleEnumField{ after(grammarAccess.getEnumAccess().getFieldsEnumFieldParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__CommAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getCommOtherComentParserRuleCall_4_1_0()); }
	ruleOtherComent{ after(grammarAccess.getEnumAccess().getCommOtherComentParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getCommentFieldCommentParserRuleCall_0_0()); }
	ruleFieldComment{ after(grammarAccess.getEnumFieldAccess().getCommentFieldCommentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__FieldNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getFieldNameTypeNameParserRuleCall_1_0()); }
	ruleTypeName{ after(grammarAccess.getEnumFieldAccess().getFieldNameTypeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumField__FieldValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAccess().getFieldValueSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getEnumFieldAccess().getFieldValueSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherComent__CommAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherComentAccess().getCommCOMMENTTerminalRuleCall_0()); }
	RULE_COMMENT{ after(grammarAccess.getOtherComentAccess().getCommCOMMENTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_C_BRACKET_L : '[';

RULE_C_BRACKET_R : ']';

RULE_C_PAREN_L : '(';

RULE_C_PAREN_R : ')';

RULE_C_BRACE_L : '{';

RULE_C_BRACE_R : '}';

RULE_C_ANGLE_L : '<';

RULE_C_ANGLE_R : '>';

RULE_C_EQUALS : '=';

RULE_C_COMMA : ',';

RULE_C_SEMICOLON : ';';

RULE_C_INPUT : 'input';

RULE_C_MAIN : 'Main';

RULE_C_TYPE : 'type';

RULE_C_ENUM : 'enum';

RULE_C_INT : 'int';

RULE_C_UINT : 'uint';

RULE_C_BOOL : 'Boolean';

RULE_C_NUMBER : 'Number';

RULE_C_STRING : 'String';

RULE_C_LIST : 'List';

RULE_C_SLICE : 'Slice';

RULE_C_PACKAGE : 'package';

RULE_NAME : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'$')*;

RULE_STRING : '"' ~(('\r'|'\n'|'"'))* '"';

fragment RULE_COMMENT_END : '*/';

RULE_COMMENT : ('/*' ( options {greedy=false;} : . )*RULE_COMMENT_END|'//' ~(('\r'|'\n'))*);

RULE_WS : (' '|'\t'|'\r'|'\n')+;


